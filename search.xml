<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>解决SpringMvc的响应头特别大</title>
    <url>/2015/06/07/2015-06-07-spring-mvc-%E5%93%8D%E5%BA%94%E5%A4%B4%E7%89%B9%E5%88%AB%E5%A4%A7/</url>
    <content><![CDATA[<span id="more"></span>




<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven&gt;</span><br><span class="line">	&lt;mvc:message-converters&gt;</span><br><span class="line">		&lt;bean class&#x3D;&quot;com.goldpalm.core.spring.mvc.UTF8StringHttpMessageConverter&quot;&gt;</span><br><span class="line">			&lt;property name&#x3D;&quot;writeAcceptCharset&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">		&lt;&#x2F;bean&gt;</span><br><span class="line">	&lt;&#x2F;mvc:message-converters&gt;</span><br><span class="line">&lt;&#x2F;mvc:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">添加这段配置</span><br><span class="line">&lt;bean class&#x3D;&quot;com.goldpalm.core.spring.mvc.UTF8StringHttpMessageConverter&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;writeAcceptCharset&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.0改为</span><br><span class="line"></span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;writeAcceptCharset&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>angularjs ui-router 刷新不缓存</title>
    <url>/2016/12/01/2016-12-01-angularjs-ui-router-%E5%88%B7%E6%96%B0%E4%B8%8D%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="angularjs-ui-router-刷新不缓存"><a href="#angularjs-ui-router-刷新不缓存" class="headerlink" title="angularjs ui-router 刷新不缓存"></a>angularjs ui-router 刷新不缓存</h1><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>加了cache:false不行，在页面ui-sref  后面加ui-sref-opts=”{reload:true}”  不行<br>网上的解决方法:$injector.get(‘$templateCache’).removeAll(); or  $templateCache.removeAll();<br>都是一次移除所有缓存 不实际</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;手动移除缓存</span><br><span class="line">$rootScope.$on(&#39;$stateChangeSuccess&#39;,function(event, toState, toParams, fromState, fromParams)&#123;</span><br><span class="line">        	  </span><br><span class="line">   &#x2F;&#x2F;移除模版缓存</span><br><span class="line">  var removeCache &#x3D; function(v)&#123;</span><br><span class="line">    if(typeof(v) &#x3D;&#x3D; &#39;String&#39;)</span><br><span class="line">    $templateCache.remove(v);</span><br><span class="line">  else if(typeof(v) &#x3D;&#x3D;&#39;function&#39;)</span><br><span class="line">    $templateCache.remove(v(toParams));</span><br><span class="line">  &#125;</span><br><span class="line">  if(toState.cache &#x3D;&#x3D;&#x3D; false)&#123;</span><br><span class="line">    if(typeof(toState.templateUrl) !&#x3D; &#39;undefined&#39;)</span><br><span class="line">      removeCache(toState.templateUrl);</span><br><span class="line">    else if(typeof(toState.views) !&#x3D; &#39;undefined&#39;)</span><br><span class="line">      for(var v in toState.views)</span><br><span class="line">        removeCache(toState.views[v].templateUrl);</span><br><span class="line">  &#125;&#x2F;&#x2F;cache</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置文件信息</span><br><span class="line">.state(&#39;app.settings.siteManage.details&#39;,&#123;&#x2F;&#x2F;站点管理  未翻译</span><br><span class="line">            	  url:&#39;&#x2F;details&#x2F;:id&#x2F;:type&#39;,</span><br><span class="line">            	  cache:false,</span><br><span class="line">            	  views: &#123;</span><br><span class="line">            		  &quot;header@app&quot; : &#123;</span><br><span class="line">            			  templateUrl : $ctx +&quot;&#x2F;main&#x2F;settings&#x2F;header&quot;</span><br><span class="line">            		  &#125;,</span><br><span class="line">            		  &quot;container@app&quot; : &#123;</span><br><span class="line">            			  templateUrl: function($routeParams)&#123;return &#39;&#x2F;siteManage&#x2F;details&#x2F;&#39;+$routeParams.id+&#39;&#x2F;&#39;+$routeParams.type;&#125;,</span><br><span class="line">                          controller:&#39;SiteManageIndexController&#39;</span><br><span class="line">                      &#125;</span><br><span class="line">            	  &#125;,</span><br><span class="line">            	  resolve:&#123;</span><br><span class="line">            		  deps:[</span><br><span class="line">            		        &#39;$ocLazyLoad&#39;,</span><br><span class="line">            		        function($ocLazyLoad)&#123;</span><br><span class="line">            		        	return $ocLazyLoad.load([&#39;&#x2F;static&#x2F;js&#x2F;controllers&#x2F;SiteManage.js&#39; ]);</span><br><span class="line">            		        &#125;</span><br><span class="line">            		  ]</span><br><span class="line">            	  &#125;</span><br><span class="line">              &#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
        <category>AngularJs</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>angularjs</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql left join 很慢的问题</title>
    <url>/2020/10/27/2020-10-27%20mysql%20left%20join%20%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="mysql-left-join-很慢的问题"><a href="#mysql-left-join-很慢的问题" class="headerlink" title="mysql left join 很慢的问题"></a>mysql left join 很慢的问题</h1><p>本地用的mysql 8  线上由于使用的云数据库 是mysql5.7</p>
<p>上一个SQL 本地 mysql 8 就0.0x秒 线上要 30+</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	a.item_id as itemId,</span><br><span class="line">	e.category_name as firCat,</span><br><span class="line">	f.category_name as secCat,</span><br><span class="line">	c.item_barcode as itemBarcode,</span><br><span class="line">	c.cost_price as costPrice,</span><br><span class="line">	c.item_original_price as itemOriginalPrice,</span><br><span class="line">	c.item_name as itemName,</span><br><span class="line">	b.quantity as quantity,</span><br><span class="line">	a.cost_price as groupCostPrice,</span><br><span class="line">	a.item_original_price as groupItemOriginalPrice,</span><br><span class="line">	a.item_sell_price as groupItemSellPrice</span><br><span class="line">FROM</span><br><span class="line">	mall_app_item a</span><br><span class="line">left JOIN mall_app_item_relevancy b ON (a.item_id &#x3D; b.app_id)</span><br><span class="line">left JOIN mall_item c ON (b.item_id &#x3D; c.item_id)</span><br><span class="line">left JOIN (</span><br><span class="line">	SELECT</span><br><span class="line">		b.item_id,</span><br><span class="line">		a.category_name</span><br><span class="line">	FROM</span><br><span class="line">		mall_item_category a</span><br><span class="line">	LEFT JOIN mall_item_category_relevancy b ON (</span><br><span class="line">		a.category_id &#x3D; b.category_id</span><br><span class="line">	)</span><br><span class="line">	WHERE</span><br><span class="line">		a.parent_id &#x3D; 0</span><br><span class="line">		and a.category_type &#x3D; &#39;1&#39;</span><br><span class="line">) e on (a.item_id &#x3D; e.item_id)</span><br><span class="line">left JOIN (</span><br><span class="line">	SELECT</span><br><span class="line">		b.item_id,</span><br><span class="line">		a.category_name</span><br><span class="line">	FROM</span><br><span class="line">		mall_item_category a</span><br><span class="line">	LEFT JOIN mall_item_category_relevancy b ON (</span><br><span class="line">		a.category_id &#x3D; b.category_id</span><br><span class="line">	)</span><br><span class="line">	WHERE</span><br><span class="line">		a.parent_id !&#x3D; 0</span><br><span class="line">		and a.category_type &#x3D; &#39;1&#39;</span><br><span class="line">) f on (a.item_id &#x3D; f.item_id)</span><br><span class="line"></span><br><span class="line">WHERE</span><br><span class="line">	1 &#x3D; 1</span><br><span class="line">AND a.item_store &#x3D; 48</span><br><span class="line">and a.item_type &#x3D; &#39;0&#39;</span><br></pre></td></tr></table></figure>

<p>↑↑↑↑↑↑这个sql在 mysql 8.x的版本里面执行是正常的 0.0x的耗时 在mysql 5.7 要 30多秒 本机i5-10400 要60秒 数据库整库备份下来的 数据量 商品就400+ 分类也只有400+ 全站只有2000+的数据量</p>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	a.item_id as itemId,</span><br><span class="line">	e.category_name as firCat,</span><br><span class="line">	f.category_name as secCat,</span><br><span class="line">	c.item_barcode as itemBarcode,</span><br><span class="line">	c.cost_price as costPrice,</span><br><span class="line">	c.item_original_price as itemOriginalPrice,</span><br><span class="line">	c.item_name as itemName,</span><br><span class="line">	b.quantity as quantity,</span><br><span class="line">	a.cost_price as groupCostPrice,</span><br><span class="line">	a.item_original_price as groupItemOriginalPrice,</span><br><span class="line">	a.item_sell_price as groupItemSellPrice</span><br><span class="line">FROM</span><br><span class="line">	mall_app_item a,</span><br><span class="line">mall_app_item_relevancy b,</span><br><span class="line">mall_item c,</span><br><span class="line">(</span><br><span class="line">	SELECT</span><br><span class="line">		b.item_id,</span><br><span class="line">		a.category_name</span><br><span class="line">	FROM</span><br><span class="line">		mall_item_category a</span><br><span class="line">	LEFT JOIN mall_item_category_relevancy b ON (</span><br><span class="line">		a.category_id &#x3D; b.category_id</span><br><span class="line">	)</span><br><span class="line">	WHERE</span><br><span class="line">		a.parent_id &#x3D; 0</span><br><span class="line">		and a.category_type &#x3D; &#39;1&#39;</span><br><span class="line">) e,</span><br><span class="line">(</span><br><span class="line">	SELECT</span><br><span class="line">		b.item_id,</span><br><span class="line">		a.category_name</span><br><span class="line">	FROM</span><br><span class="line">		mall_item_category a</span><br><span class="line">	LEFT JOIN mall_item_category_relevancy b ON (</span><br><span class="line">		a.category_id &#x3D; b.category_id</span><br><span class="line">	)</span><br><span class="line">	WHERE</span><br><span class="line">		a.parent_id !&#x3D; 0</span><br><span class="line">		and a.category_type &#x3D; &#39;1&#39;</span><br><span class="line">) f</span><br><span class="line">WHERE</span><br><span class="line">	1 &#x3D; 1</span><br><span class="line">and a.item_id &#x3D; b.app_id</span><br><span class="line">and b.item_id &#x3D; c.item_id</span><br><span class="line">and a.item_id &#x3D; e.item_id</span><br><span class="line">and a.item_id &#x3D; f.item_id</span><br><span class="line">AND a.item_store &#x3D; 48</span><br><span class="line">and a.item_type &#x3D; &#39;0&#39;</span><br></pre></td></tr></table></figure>

<p>去掉所有的join 修改为多表查询多个结果集 速度就正常了</p>
<p>但是就有问题了 讲道理 Sql join的效率应该比多表查更高一点的</p>
<blockquote>
<p>在上面语句中，实际上是创建了多张表的笛卡尔积，所有可能的组合都会被创建出来。在笛卡尔连接中，在上面的例子中，如果有1000商品和1000条商品分类记录，这个查询会先产生1000000个结果，然后通过正确的 ID过滤出1000条记录。 这是一种低效利用数据库资源，数据库多做100倍的工作。 在大型数据库中，笛卡尔连接是一个大问题，对两个大表的笛卡尔积会创建数10亿或万亿的记录。</p>
<p>为了避免创建笛卡尔积，应该使用INNER JOIN ：</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 事务嵌套的问题</title>
    <url>/2020/11/06/2020-11-06%20%20%E5%B5%8C%E5%A5%97%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="Aop的局限性导致嵌套事务的问题"><a href="#Aop的局限性导致嵌套事务的问题" class="headerlink" title="Aop的局限性导致嵌套事务的问题"></a>Aop的局限性导致嵌套事务的问题</h1><p>事情是这样的:</p>
<p>​    事务都是XML声明拦截 service 包路径下的所有事务</p>
<p>​    由于这次项目 在service上面直接就是Controller</p>
<p>​    不想在 Controller 中编写逻辑代码</p>
<p>​    就想 声明式事务 和 注解事务 同时使用</p>
<p>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">IDemoService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//xml中声明了 拦截Service包下的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(xxx in xxx)&#123;</span><br><span class="line">        	<span class="keyword">try</span>&#123;</span><br><span class="line">	        	<span class="keyword">this</span>.work(msg); <span class="comment">// *** 代码 1 ***</span></span><br><span class="line">        	&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        		<span class="comment">//不回滚</span></span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//这里的逻辑出错的话需要单独回滚</span></span><br><span class="line">    	<span class="comment">//不回滚for调用的前一个方法的提交</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>按逻辑应该是没问题的</p>
<p>但是调用之后 并不触发work方法的回滚</p>
<p>原因是:</p>
<p>​    Spring Aop 代理的是 IDemoService 这个对象 并不是代理方法 通过 IDemoService 注入的Bean</p>
<p>​    比如 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">IDemoService demoService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demoService.demo();</span><br><span class="line"><span class="comment">//这样调用  demo是有被切入的</span></span><br><span class="line"><span class="comment">//这个 demoService 是Spring生成的动态对象 x</span></span><br><span class="line"></span><br><span class="line">x 有个 dome方法</span><br><span class="line">x.dome 去调用 DemoServiceImpl.dome</span><br><span class="line">所以 x.dome有被注入事务管理 有被aop切入</span><br><span class="line">而 <span class="keyword">this</span>.work是 原始方法没有过代理对象所以没有被切入</span><br><span class="line"></span><br><span class="line"><span class="comment">// x 的方法有被代理</span></span><br><span class="line"><span class="comment">//而 this.work(msg); 这样调用的 就是DemoServiceImpl 中的work方法 并没有经过代理对象 x</span></span><br><span class="line"><span class="comment">//所以并不会进入Aop</span></span><br><span class="line"><span class="comment">//因此 @Transactional 注解也就不生效了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>解决方式:</p>
<pre><code>1.   AopContext.currentProxy()  获取当前的代理对象 通过代理对象调用 work方法
 2.   work 写到其他 Service 通过其他Service 调用
</code></pre>
<p>原本以为是 Spring 不能同时使用两种代理方式的问题</p>
<p>找了半天 修改了半天配置 结果是AOP代理的局限性导致的问题 捂脸&gt;_&lt;!!!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原来以为是 </span></span><br><span class="line">TransactionInterceptor interceptor = (TransactionInterceptor) event.getApplicationContext().getBean(TransactionInterceptor.class);</span><br><span class="line">interceptor.setTransactionAttributeSources(<span class="keyword">new</span> AnnotationTransactionAttributeSource(),interceptor.getTransactionAttributeSource());</span><br></pre></td></tr></table></figure>

<p>实际上</p>
<p>​    @ImportResource 的XML中 有填写 tx:annotation-driven 就可以同时使用 两种事务管理方式</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign Gzip 请求错误</title>
    <url>/2020/11/06/2020-11-25%20%20Feign%20Gzip%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>Feign 请求 响应的项目报错</p>
<p><code> JSON parse error: Illegal character ((CTRL-CHAR, code 31)): only regular white space (\r, \n, \t) is allowed between tokens; nested exception is com.fasterxml.jackson.core.JsonParseException: Illegal character ((CTRL-CHAR, code 31)): only regular white space (\r, \n, \t) is allowed between tokens  at [Source: (PushbackInputStream); line: 1, column: 2]</code></p>
<p>还以为是Json使用的对应不上</p>
<p>截取请求的 InputStream 发现 是Gzip的乱码</p>
<p>原来是 Feign 发送的参数较多 自己启用了 Gzip压缩</p>
<p>但是接受时并没有判断 request.Header 里面有没有 Gzip</p>
<p>查了网上其他的回答</p>
<p><a href="https://www.jianshu.com/p/df37eb5f2169">https://www.jianshu.com/p/df37eb5f2169</a></p>
<p>说是 SpringCloud版升级到Hoxton即可</p>
<p>但我的项目本身 SpringCloud 版本一直都是 Hoxton.SR8</p>
<p>还是不行</p>
<p>想了一下觉得 Feign应该只是封装调用请求的方式</p>
<p>毕竟 提供接口给Feign的方法也能被其他http请求调用</p>
<p>那就直接 搜索一下 Springboot gzip解压http 请求</p>
<h3 id="编写Filter"><a href="#编写Filter" class="headerlink" title="编写Filter"></a>编写Filter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * GZIP处理Filter</span><br><span class="line"> *&#x2F;</span><br><span class="line">@WebFilter(filterName &#x3D; &quot;httpServletGzipFilter&quot;, urlPatterns &#x3D; &quot;&#x2F;&quot;)</span><br><span class="line">public class HttpServletGzipFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        chain.doFilter(new HttpServletRequestWrapper((HttpServletRequest) request), response);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig arg0) throws ServletException &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">class HttpServletRequestWrapper extends javax.servlet.http.HttpServletRequestWrapper &#123;</span><br><span class="line">    private HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    public HttpServletRequestWrapper(HttpServletRequest request) &#123;</span><br><span class="line">        super(request);</span><br><span class="line">        this.request &#x3D; request;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 根据 request header 的 Content-Encoding 判断是否启用 gzip 解压数据流</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class="line">        ServletInputStream stream &#x3D; request.getInputStream();</span><br><span class="line">        String contentEncoding &#x3D; request.getHeader(&quot;Content-Encoding&quot;);</span><br><span class="line">        if (null !&#x3D; contentEncoding &amp;&amp; contentEncoding.indexOf(&quot;gzip&quot;) !&#x3D; -1) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                final GZIPInputStream gzipInputStream &#x3D; new GZIPInputStream(stream);</span><br><span class="line">                ServletInputStream newStream &#x3D; new ServletInputStream() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public int read() throws IOException &#123;</span><br><span class="line">                        return gzipInputStream.read();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean isFinished() &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean isReady() &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void setReadListener(ReadListener readListener) &#123;&#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                return newStream;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;uncompress content fail.&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return stream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注册Filter交给Spring管理"><a href="#注册Filter交给Spring管理" class="headerlink" title="注册Filter交给Spring管理"></a>注册Filter交给Spring管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class HttpServletFilterConfig &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 注册 HttpServletFilter</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean filterRegistrationBean() &#123;</span><br><span class="line">        FilterRegistrationBean registrationBean &#x3D; new FilterRegistrationBean();</span><br><span class="line">        registrationBean.setFilter(new HttpServletGzipFilter());</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; urlPatterns &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        urlPatterns.add(&quot;&#x2F;*&quot;);</span><br><span class="line">        registrationBean.setUrlPatterns(urlPatterns);</span><br><span class="line"></span><br><span class="line">        return registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来按原先的 @RequestBody 即可正常获得数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@MysdInterior</span><br><span class="line">    @PostMapping (&quot;place&quot;)</span><br><span class="line">    @ApiOperation(value &#x3D; &quot;生成订单&quot;, notes &#x3D; &quot;提交订单加入数据库&quot;)</span><br><span class="line">    public PlaceOrderVo place(@RequestBody PlaceOrderVo vo) &#123;</span><br><span class="line">        System.out.println(vo);</span><br><span class="line">            log.info(&quot;mall api 生成订单 ： place()&quot;);</span><br><span class="line">            log.info(&quot;参数 ：&quot; + String.valueOf(JSONUtil.parse(vo)));</span><br><span class="line">        return vo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Feign</tag>
        <tag>Gzip</tag>
      </tags>
  </entry>
  <entry>
    <title>优化SQL Group By</title>
    <url>/2020/12/02/2020-12-02%20%E4%BC%98%E5%8C%96SQL%20Group%20By/</url>
    <content><![CDATA[<span id="more"></span>


<h3 id="SQL-Group-By-复杂查询"><a href="#SQL-Group-By-复杂查询" class="headerlink" title="SQL Group By 复杂查询"></a>SQL Group By 复杂查询</h3><p>MySql 5.7以前支持 group by 查询的字段不在 group by 的字段中 默认选第一行 而5.7以后不支持这样的写法 同事就写出了以下的代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">                   <span class="built_in">max</span>(mi.item_name),</span><br><span class="line">                   <span class="built_in">max</span>(mi.item_unit),</span><br><span class="line">                   <span class="built_in">max</span>(mi.item_specification),</span><br><span class="line">                   <span class="built_in">max</span>(mi.item_pics),</span><br><span class="line">                   sc.item_barcode,</span><br><span class="line">                   IF(scuh.use_type <span class="operator">=</span> <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>) use_type,</span><br><span class="line">                   <span class="built_in">SUM</span>(scuh.purchase_num) <span class="keyword">AS</span> quantity</span><br><span class="line">                   <span class="keyword">FROM</span></span><br><span class="line">                   shop_card_use_history scuh</span><br><span class="line">                   <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shop_card sc <span class="keyword">ON</span> scuh.card_id <span class="operator">=</span> sc.card_id</span><br><span class="line">                   <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">                     (    </span><br><span class="line">										<span class="keyword">SELECT</span></span><br><span class="line">                         mi.item_barcode,</span><br><span class="line">                         mi.item_pics,</span><br><span class="line">                         item_name,</span><br><span class="line">                         item_store,        </span><br><span class="line">												mi.item_unit,</span><br><span class="line">                         mi.item_specification</span><br><span class="line">                         <span class="keyword">FROM</span> mall_item mi</span><br><span class="line">                         <span class="keyword">WHERE</span> mi.item_id <span class="operator">=</span></span><br><span class="line">                         (</span><br><span class="line">                           <span class="keyword">SELECT</span></span><br><span class="line">                           item_id</span><br><span class="line">                           <span class="keyword">FROM</span> mall_item mi1</span><br><span class="line">                           <span class="keyword">WHERE</span> </span><br><span class="line">                           mi.item_barcode <span class="operator">=</span> mi1.item_barcode <span class="keyword">AND</span> mi.item_store <span class="operator">=</span> mi1.item_store</span><br><span class="line">                           <span class="keyword">ORDER</span> <span class="keyword">BY</span> mi1.item_status <span class="keyword">ASC</span>, IFNULL(mi1.update_time, NOW()) <span class="keyword">DESC</span></span><br><span class="line">                           LIMIT <span class="number">1</span></span><br><span class="line">                         ) </span><br><span class="line">                     ) mi <span class="keyword">ON</span> sc.item_barcode <span class="operator">=</span> mi.item_barcode <span class="keyword">AND</span> scuh.mall_id <span class="operator">=</span> mi.item_store</span><br><span class="line">                   <span class="keyword">WHERE</span> scuh.shop_receipt_id <span class="operator">=</span> &quot;ps_31707080856260608&quot;</span><br><span class="line">                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> sc.item_barcode, scuh.use_type, scuh.mall_id</span><br><span class="line">                   <span class="keyword">ORDER</span> <span class="keyword">BY</span> quantity <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p>应该把 group by 放在里层 外层去关联只需要一行数据的其他表</p>
<p>修改成正常 使用group by的写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	b.item_name,</span><br><span class="line">	b.item_unit,</span><br><span class="line">	b.item_specification,</span><br><span class="line">	b.item_pics,</span><br><span class="line">	a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		scuh.item_barcode,</span><br><span class="line">		sc.item_id,</span><br><span class="line">		scuh.use_type,</span><br><span class="line">		<span class="built_in">sum</span>(scuh.purchase_num)</span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		shop_card_use_history scuh</span><br><span class="line">		<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shop_card sc <span class="keyword">ON</span> scuh.card_id <span class="operator">=</span> sc.card_id </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		scuh.shop_receipt_id <span class="operator">=</span> &quot;ps_31707080856260608&quot; </span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">		scuh.item_barcode,</span><br><span class="line">		sc.item_id,</span><br><span class="line">		scuh.use_type</span><br><span class="line">	) a</span><br><span class="line">	<span class="keyword">left</span> <span class="keyword">join</span> mall_item b <span class="keyword">on</span>(a.item_id <span class="operator">=</span> b.item_id)</span><br><span class="line">	<span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<p>再修改 查询最新商品的逻辑 原有的逻辑太复杂 涉及到上架下架 逻辑删除之类的 实际上 item_id 最大的版本 一般就是最新的数据</p>
<p>实在不行 java中处理商品信息也可以</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	b.item_name,</span><br><span class="line">	b.item_unit,</span><br><span class="line">	b.item_specification,</span><br><span class="line">	b.item_pics,</span><br><span class="line">	a.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		scuh.item_barcode,</span><br><span class="line">		scuh.use_type,</span><br><span class="line">		<span class="built_in">sum</span>( scuh.purchase_num ) </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		shop_card_use_history scuh</span><br><span class="line">		<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shop_card sc <span class="keyword">ON</span> scuh.card_id <span class="operator">=</span> sc.card_id </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		scuh.shop_receipt_id <span class="operator">=</span> &quot;ps_31707080856260608&quot; </span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">		scuh.item_barcode,</span><br><span class="line">		scuh.use_type </span><br><span class="line">	) a</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		mb.<span class="operator">*</span> </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		( <span class="keyword">SELECT</span> item_barcode, item_store, <span class="built_in">max</span>( item_id ) <span class="keyword">AS</span> item_id <span class="keyword">FROM</span> mall_item <span class="keyword">GROUP</span> <span class="keyword">BY</span> item_barcode, item_store ) ma</span><br><span class="line">		<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> mall_item mb <span class="keyword">ON</span> ( ma.item_id <span class="operator">=</span> mb.item_id ) </span><br><span class="line">	) b <span class="keyword">ON</span> ( a.item_barcode <span class="operator">=</span> b.item_barcode ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	<span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
        <tag>Group By</tag>
      </tags>
  </entry>
  <entry>
    <title>Allatori破解</title>
    <url>/2021/01/18/2021-01-18%20Allatori%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<span id="more"></span>

<p><strong>实现代码:<a href="https://github.com/lqs1848/AllatoriCrack">https://github.com/lqs1848/AllatoriCrack</a></strong></p>
<p>根据 <a href="https://www.52pojie.cn/thread-622023-1-1.html">https://www.52pojie.cn/thread-622023-1-1.html</a> 做了一些改进</p>
<p>帖子里面没有具体代码 没有具体实现 QAQ</p>
<p>还要求在ubuntu下反编译</p>
<p>实际操作了一下,要求在ubuntu环境下主要是因为 windows 目录不区分大小写 <strong>Allatori</strong> 都是 iIIii 大小写的i混合的文件名</p>
<p>那用 zip操作即可</p>
<p>具体流程为:</p>
<p>zip 读取<strong>Allatori</strong>.jar 找到所有的class</p>
<p>使用 javassist 读取class的字节码</p>
<p>判断这个类是否有 THIS_IS_DEMO_VERSION_NOT_FOR_COMMERCIAL_USE 方法</p>
<p>然后替换这个方法的返回值</p>
<p>String 返回值的解密全部条件都带上判断即可</p>
<p>但是要移除</p>
<p>System.out.println()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">################################################</span><br><span class="line">#                                              #</span><br><span class="line">#        ## #   #    ## ### ### ##  ###        #</span><br><span class="line">#       # # #   #   # #  #  # # # #  #         #</span><br><span class="line">#       ### #   #   ###  #  # # ##   #         #</span><br><span class="line">#       # # ### ### # #  #  ### # # ###        #</span><br><span class="line">#                                              #</span><br><span class="line"># Obfuscation by Allatori Obfuscator v7.6 DEMO #</span><br><span class="line">#                                              #</span><br><span class="line">#           http:&#x2F;&#x2F;www.allatori.com            #</span><br><span class="line">#                                              #</span><br><span class="line">################################################</span><br></pre></td></tr></table></figure>



<p>全部都操作完</p>
<p>简单项目ok</p>
<p>复杂项目加密出错…</p>
<p>查看了一下加密信息</p>
<p>很多的类出现了方法名称重复</p>
<p>大概就是比较长的类</p>
<p>原来是有一个 </p>
<p>​    ALLATORIXDEMO方法</p>
<p>​    还有一个随机英文大小写字符 的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m.insertAfter(&quot; if             ($_!&#x3D;null&amp;&amp;!$_.isEmpty()&amp;&amp;$_.equals(\&quot;ALLATORIxDEMO\&quot;)) &#123;\n&quot; +&quot;$_ &#x3D; \&quot;qtfreet00\&quot;;\n&quot; +&quot;&#125;&quot;);</span><br></pre></td></tr></table></figure>

<p>按 qtfreet00 的做法 过滤返回参数是 ALLATORIxDEMO 应该就是可行的 但是不知道为什么 一样被替换了</p>
<p>打印方法入参进行对比</p>
<p>第一行是参数 </p>
<p>第二行是返回值</p>
<p>依次交替</p>
<blockquote>
<p>(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br>(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br>c.m.common.utils.i&amp;<init>&amp;(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br><init><br>(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br>(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br>c.m.common.utils.i&amp;ALLATORIxDEMO&amp;Lcom/mysd/common/utils/MapCache;<br>null<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>null<br>c.m.common.utils.MapCache&amp;keys&amp;()Ljava/util/Set;<br>keys<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;J)Ljava/lang/Object;<br>put<br>c.m.common.utils.MapCache&amp;clear&amp;()V<br>clear<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;Lcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache&amp;reSize&amp;()V<br>reSize<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;JLcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>put<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Lcom/mysd/common/utils/i;)Z<br>null<br>c.m.common.utils.MapCache&amp;remove&amp;(Ljava/lang/Object;)V<br>remove<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache&amp;contains&amp;(Ljava/lang/String;)Z<br>contains<br>c.m.common.utils.MapCache&amp;size&amp;()I<br>size<br>c.m.common.utils.MapCache&amp;<init>&amp;()V<br><init><br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;Lcom/mysd/common/utils/MapEx;<br>null<br>c.m.common.utils.i&amp;ALLATORIxDEMO&amp;Lcom/mysd/common/utils/MapCache;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.i&amp;<init>&amp;(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br><init><br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;Lcom/mysd/common/utils/MapEx;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;keys&amp;()Ljava/util/Set;<br>keys<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;J)Ljava/lang/Object;<br>put<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;clear&amp;()V<br>clear<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;Lcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;reSize&amp;()V<br>reSize<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;JLcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>put<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Lcom/mysd/common/utils/i;)Z<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;remove&amp;(Ljava/lang/Object;)V<br>remove<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;contains&amp;(Ljava/lang/String;)Z<br>contains<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;size&amp;()I<br>size<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;<init>&amp;()V<br><init><br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.i&amp;ALLATORIxDEMO&amp;Lcom/mysd/common/utils/MapCache;<br>ALLATORIxDEMO<br>Lcom/mysd/common/utils/MapCache;<br>null<br>(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br>null<br>Lcom/mysd/common/utils/MapCache;<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.i&amp;<init>&amp;(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br><init><br>(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;reSize&amp;()V<br>reSize<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;J)Ljava/lang/Object;<br>put<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Lcom/mysd/common/utils/i;)Z<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;Lcom/mysd/common/utils/MapEx;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;JLcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>get<br>(Lcom/mysd/common/utils/MapCache;Ljava/lang/Object;J)V<br>null<br>Lcom/mysd/common/utils/MapCache;<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>com/mysd/common/utils/MapCache<br>null<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>[INFO] Obfuscation completed. Writing log file…<br>c.m.common.utils.i&amp;ALLATORIxDEMO&amp;Lcom/mysd/common/utils/MapCache;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Lcom/mysd/common/utils/i;)Z<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Lcom/mysd/common/utils/i;)Z<br>“ s=”118” e=”118<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;(Ljava/lang/String;)Ljava/lang/String;<br>ALLATORIxDEMO<br>c.m.common.utils.MapCache&amp;AllatoriDecryptString&amp;(Ljava/lang/String;)Ljava/lang/String;<br>F<br>c.m.common.utils.MapCache&amp;clear&amp;()V<br>clear<br>c.m.common.utils.MapCache&amp;clear&amp;()V<br>“ s=”103” e=”107<br>c.m.common.utils.MapCache&amp;contains&amp;(Ljava/lang/String;)Z<br>contains<br>c.m.common.utils.MapCache&amp;contains&amp;(Ljava/lang/String;)Z<br>“ s=”6” e=”6<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;)Ljava/lang/Object;<br>“ s=”22” e=”233<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;JLcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;JLcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>“ s=”47” e=”224<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;Lcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>get<br>c.m.common.utils.MapCache&amp;get&amp;(Ljava/lang/Object;Lcom/mysd/common/utils/Callable;)Ljava/lang/Object;<br>“ s=”115” e=”115<br>c.m.common.utils.MapCache&amp;keys&amp;()Ljava/util/Set;<br>keys<br>c.m.common.utils.MapCache&amp;keys&amp;()Ljava/util/Set;<br>“ s=”72” e=”72<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>put<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>“ s=”3” e=”3<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;J)Ljava/lang/Object;<br>put<br>c.m.common.utils.MapCache&amp;put&amp;(Ljava/lang/Object;Ljava/lang/Object;J)Ljava/lang/Object;<br>“ s=”112” e=”210<br>c.m.common.utils.MapCache&amp;reSize&amp;()V<br>reSize<br>c.m.common.utils.MapCache&amp;reSize&amp;()V<br>“ s=”40” e=”190<br>c.m.common.utils.MapCache&amp;remove&amp;(Ljava/lang/Object;)V<br>remove<br>c.m.common.utils.MapCache&amp;remove&amp;(Ljava/lang/Object;)V<br>“ s=”71” e=”209<br>c.m.common.utils.MapCache&amp;size&amp;()I<br>size<br>c.m.common.utils.MapCache&amp;size&amp;()I<br>“ s=”132” e=”230<br>c.m.common.utils.MapCache&amp;ALLATORIxDEMO&amp;Lcom/mysd/common/utils/MapEx;<br>ALLATORIxDEMO</p>
</blockquote>
<p>对比发现 入参带有 AllatoriDecryptString 的是返回 一个随机英文大小写字符</p>
<p>修改判断代码 $_ 前面加上 $1.indexOf(&quot;AllatoriDecryptString&quot;)</p>
<p>搞定收工</p>
]]></content>
      <categories>
        <category>破解</category>
      </categories>
      <tags>
        <tag>Allatori</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>RequestBody读取</title>
    <url>/2021/01/27/2021-01-27%20%20RequestBody%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<span id="more"></span>

<p>requestBody 多次读取</p>
<p>网上的做法一般是</p>
<p>重新封装一个 request</p>
<p>把初始的request的body读取后 重新写入一个 inputStream</p>
<p>如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCachingRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] body;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletInputStream inputStream;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContentCachingRequestWrapper</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        loadBody(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBody</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        body = IOUtils.toByteArray(request.getInputStream());</span><br><span class="line">        inputStream = <span class="keyword">new</span> RequestCachingInputStream(body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getBody() &#123;</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> inputStream;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getInputStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, getCharacterEncoding()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestCachingInputStream</span> <span class="keyword">extends</span> <span class="title">ServletInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ByteArrayInputStream inputStream;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RequestCachingInputStream</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inputStream.available() == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readlistener)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这个写法有个问题就是 </p>
<p>有些方法使用 parameterMap 获取请求参数的 会获取不到</p>
<p>应该改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCachingRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] body;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String[]&gt; parameterMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletInputStream inputStream;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContentCachingRequestWrapper</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        parameterMap = request.getParameterMap();</span><br><span class="line">        loadBody(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBody</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        body = IOUtils.toByteArray(request.getInputStream());</span><br><span class="line">        inputStream = <span class="keyword">new</span> RequestCachingInputStream(body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getBody() &#123;</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.parameterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> inputStream;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getInputStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, getCharacterEncoding()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestCachingInputStream</span> <span class="keyword">extends</span> <span class="title">ServletInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ByteArrayInputStream inputStream;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RequestCachingInputStream</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inputStream.available() == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readlistener)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这样就从 parameterMap 里面获取参数的方法也可以在我们自定义的request里面获取都 请求参数了</p>
<p>原因是 request.getParameterMap(); 和 request.getInputStream(); 这两个方法是竞争的</p>
<p>不管调用哪一个 都会执行 readStarted = true;</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>RequestBody</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Aop Cglib Jdk问题</title>
    <url>/2021/02/05/2021-02-05%20Spring%20Aop%20Cglib%20Jdk%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>

<p>太乱不看版总结:</p>
<p>​    Spring 的 AOP都是用代理实现的 代理是无法拦截 内部调用</p>
<p>​    如果要拦截内部调用 就得编译时织入(修改字节码 修改目标对象)</p>
<p>SpringBoot2 默认就使用 Cglib 进行 AOP</p>
<p>可以在注入的Bean getClass().getName() 查看 名称肯定都带有 $$EnhancerBySpringCGLIB$$fda183c9</p>
<p>百度 <strong>SpringBoot AOP无法拦截类内部的调用方法</strong> 很多都甩锅JDK代理 说使用Cglib就没问题</p>
<p>现在默认就是 cglib 但使用时还是碰到内部类无法被拦截的问题</p>
<p>实测添加注解</p>
<p>​    <code>@EnableAspectJAutoProxy(exposeProxy=true,proxyTargetClass=true)</code></p>
<p>无效</p>
<p>比如 <a href="https://blog.csdn.net/piaoslowly/article/details/81743692">https://blog.csdn.net/piaoslowly/article/details/81743692</a> 讲的非常详细</p>
<p><a href="https://blog.csdn.net/dm_vincent/article/details/57526325">https://blog.csdn.net/dm_vincent/article/details/57526325</a></p>
<blockquote>
<p>关于动态代理和CGLIB这两种方式的简要总结如下：</p>
<ul>
<li>JDK动态代理(Dynamic Proxy)<ul>
<li>基于标准JDK的动态代理功能</li>
<li>只针对实现了接口的业务对象</li>
</ul>
</li>
<li>CGLIB<ul>
<li>通过动态地对目标对象进行子类化来实现AOP代理，上面截图中的<code>SampleBean$$EnhancerByCGLIB$$1767dd4b</code>即为动态创建的一个子类</li>
<li>需要指定<code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code>来强制使用</li>
<li>当业务对象没有实现任何接口的时候默认会选择CGLIB</li>
</ul>
</li>
</ul>
</blockquote>
<p>Spring 的 AOP 都是基于动态代理</p>
<p>所以是无法解决 内部接口调用</p>
<p>即使是CGLIB也是使用了动态代理</p>
<blockquote>
<p>最大的区别在于两者实现AOP的底层原理不太一样：</p>
<ul>
<li>Spring AOP: 基于代理(Proxying)</li>
<li>AspectJ: 基于字节码操作(Bytecode Manipulation)</li>
</ul>
</blockquote>
<p>如果非要动态调用内部的 就得使用 AspectJ</p>
<p>CGLIB 为什么也不能代理 </p>
<p>这篇文章讲的很详细 </p>
<p><a href="https://blog.csdn.net/luanlouis/article/details/24589193">https://blog.csdn.net/luanlouis/article/details/24589193</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> samples;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.core.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.core.Signature;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Callback;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Factory;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">fa7aa2cd</span> <span class="keyword">extends</span> <span class="title">Programmer</span></span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">//......省略</span></span><br><span class="line">  <span class="keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0;  <span class="comment">// Enchaner传入的methodInterceptor</span></span><br><span class="line">   <span class="comment">// ....省略</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    MethodInterceptor tmp4_1 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">    <span class="keyword">if</span> (tmp4_1 == <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      tmp4_1;</span><br><span class="line">      CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);<span class="comment">//若callback 不为空，则调用methodInterceptor 的intercept()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.CGLIB$CALLBACK_0 != <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">      <span class="comment">//如果没有设置callback回调函数，则默认执行父类的方法</span></span><br><span class="line">      <span class="keyword">super</span>.code();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//....后续省略</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CGLIB 生成出来的动态代理类 也不能拦截到你内部调用</p>
<p>因为他也只是继承目标类 并不是修改目标类</p>
<p>AspectJ 就像 <strong>Javassist</strong> 是编译时直接修改了目标类 而不是继承目标对象进行拦截</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Aop</tag>
        <tag>Cglib</tag>
      </tags>
  </entry>
  <entry>
    <title>WebFilter无效问题</title>
    <url>/2021/03/03/2021-03-03%20WebFilter%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>

<blockquote>
<p>在springboot应用中自定义Filter时，在Filter上添加<code>@compent</code>注解会使<code>urlPatterns</code>匹配路径变为<code>/*</code>而不是自定义路径</p>
</blockquote>
<p>应该是因为 @<em>WebFilter</em>注解 是由 Servlet3.0 提供的 而不是 spring提供的</p>
<p>所以 spring 添加这个过滤器时没有把<code>urlPatterns</code>信息添加到过滤器中</p>
<h1 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h1><ol>
<li>移除类上的<code>@compent</code>注解，在启动类上添加<code>@ServletComponentScan</code>注解</li>
<li>不使用<code>@WebFilter</code>方式声明过滤器，使用<code>FilterRegistrationBean</code>在配置类中注入Filter</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>WebFilter</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven AssertionError</title>
    <url>/2021/03/19/2021-03-19%20Maven%20AssertionError/</url>
    <content><![CDATA[<span id="more"></span>

<blockquote>
<p>Exception in thread “main” java.lang.AssertionError</p>
</blockquote>
<p>Maven 编译报错</p>
<p>没有给出具体内容</p>
<p>加上forceJavacCompilerUse强制打印出compile的错误信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- forceJavacCompilerUse can help to show the location of exact compilation error --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">forceJavacCompilerUse</span>&gt;</span>true<span class="tag">&lt;/<span class="name">forceJavacCompilerUse</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>后面发现是 我引用了 org.junit.jupiter.api.Test; </p>
<p>但是Test在编译时是不引入的</p>
<p>导致编译报错</p>
<p>把使用了 测试类移动到 src/test/java 中即可</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式 日志追踪 链路追踪</title>
    <url>/2021/03/31/2021-03-31%E5%88%86%E5%B8%83%E5%BC%8F%20%E6%97%A5%E5%BF%97%E8%BF%BD%E8%B8%AA%20%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="日志追踪码传递"><a href="#日志追踪码传递" class="headerlink" title="日志追踪码传递"></a>日志追踪码传递</h1><blockquote>
<p>MDC（Mapped Diagnostic Context，映射调试上下文）是 log4j 和 logback 提供的一种方便在多线程条件下记录日志的功能。MDC 可以看成是一个与当前线程绑定的Map，可以往其中添加键值对。</p>
</blockquote>
<blockquote>
<p>MDC内部使用的是ThreadLocal所以只有本线程才有效</p>
</blockquote>
<p>slf4j MDC源码中 没有用 ThreadLocal 就是普通的Map </p>
<p>使用 ThreadLocal 的是其他的日志框架覆盖 MDC实现</p>
<p>比如 logback 就是在自身的包中覆盖了 org.slf4j 包中的部分类</p>
<p>logback 中的MDC 就是使用 ThreadLocal</p>
<h1 id="在-微服务当前切换-服务传递追踪码"><a href="#在-微服务当前切换-服务传递追踪码" class="headerlink" title="在 微服务当前切换 服务传递追踪码"></a>在 微服务当前切换 服务传递追踪码</h1><h2 id="gateway-网关传递"><a href="#gateway-网关传递" class="headerlink" title="gateway 网关传递"></a>gateway 网关传递</h2><p>直接在转发的请求头中携带即可</p>
<h2 id="Feign-Hystrix传递"><a href="#Feign-Hystrix传递" class="headerlink" title="Feign Hystrix传递"></a>Feign Hystrix传递</h2><p>网上的写法都是介绍 HystrixRequestVariableDefault </p>
<blockquote>
<p>feign 如果有用 hystrix 传递时有涉及到跨线程 需要使用 HystrixRequestVariableDefault 传递</p>
</blockquote>
<p>不过太麻烦了 我用的 重写 HystrixConcurrencyStrategy 去实现</p>
<p>重写 wrapCallable 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Callable&lt;T&gt; <span class="title">wrapCallable</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//TransmittableThreadLocal修饰原有Callable</span></span><br><span class="line">       <span class="keyword">return</span> TtlCallable.get(callable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还需要按最后 去替换线程池 </p>
<p>和 在Configuration配置自定义 HystrixConcurrencyStrategy 替换默认的 HystrixConcurrencyStrategyDefault</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> HystrixConcurrencyStrategy <span class="title">requestContextHystrixConcurrencyStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyHystrixConcurrencyStrategy();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处参考了 <a href="https://shanhy.blog.csdn.net/article/details/108668952">https://shanhy.blog.csdn.net/article/details/108668952</a></p>
<h2 id="dubbo-传递"><a href="#dubbo-传递" class="headerlink" title="dubbo 传递"></a>dubbo 传递</h2><p>带隐藏参数即可 在RpcContext 中携带</p>
<h2 id="父子线程传递"><a href="#父子线程传递" class="headerlink" title="父子线程传递"></a>父子线程传递</h2><p>网上的方法都是 </p>
<blockquote>
<p><a href="https://yanglinwei.blog.csdn.net/article/details/113503577">https://yanglinwei.blog.csdn.net/article/details/113503577</a></p>
<p><a href="https://segmentfault.com/a/1190000020083061">https://segmentfault.com/a/1190000020083061</a></p>
<p><a href="https://juejin.cn/post/6844904128351567885">https://juejin.cn/post/6844904128351567885</a></p>
<p><a href="https://blog.csdn.net/zlt2000/article/details/99641821">https://blog.csdn.net/zlt2000/article/details/99641821</a></p>
</blockquote>
<p>内容都一样也不知道是谁抄谁的</p>
<p>其中最重要的是第一行</p>
<blockquote>
<p>package org.slf4j;</p>
</blockquote>
<p>要覆盖掉 slf4j 中的MDCAdapter</p>
<blockquote>
<p>MDC.mdcAdapter = mdcAdapter;</p>
</blockquote>
<p>这个根本就不重要</p>
<p>只要和 logback 一样实现 把 org.slf4j.impl 实现了就行 重写 StaticMDCBinder 即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticMDCBinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticMDCBinder SINGLETON = <span class="keyword">new</span> StaticMDCBinder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticMDCBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MDCAdapter <span class="title">getMDCA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里替换成功自己的自定义的MDC</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyMDCAdapter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMDCAdapterClassStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MysdMDCAdapter.class.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="线程池替换"><a href="#线程池替换" class="headerlink" title="线程池替换"></a>线程池替换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池配置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 核心线程池大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大可创建的线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列最大长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池维护线程所允许的空闲时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAliveSeconds = <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;threadPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">threadPoolTaskExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	MyThreadPoolTaskExecutor executor = <span class="keyword">new</span> MyThreadPoolTaskExecutor();</span><br><span class="line">        executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">        executor.setCorePoolSize(corePoolSize);</span><br><span class="line">        executor.setQueueCapacity(queueCapacity);</span><br><span class="line">        executor.setKeepAliveSeconds(keepAliveSeconds);</span><br><span class="line">        <span class="comment">// 线程池对拒绝任务(无线程可用)的处理策略</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;<span class="comment">//method</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">	@Bean</span></span><br><span class="line"><span class="comment">	public Executor taskExecutor() &#123;</span></span><br><span class="line"><span class="comment">		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span></span><br><span class="line"><span class="comment">		executor.setMaxPoolSize(maxPoolSize);</span></span><br><span class="line"><span class="comment">		executor.setCorePoolSize(corePoolSize);</span></span><br><span class="line"><span class="comment">		executor.setQueueCapacity(queueCapacity);</span></span><br><span class="line"><span class="comment">		executor.setKeepAliveSeconds(keepAliveSeconds);</span></span><br><span class="line"><span class="comment">		// 线程池对拒绝任务(无线程可用)的处理策略</span></span><br><span class="line"><span class="comment">		executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());</span></span><br><span class="line"><span class="comment">		return TtlExecutors.getTtlExecutor(executor);</span></span><br><span class="line"><span class="comment">	&#125;//method</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行周期性或定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;scheduledExecutorService&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ScheduledExecutorService <span class="title">scheduledExecutorService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    	ScheduledExecutorService scheduledExecutorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize,</span><br><span class="line">                <span class="keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="string">&quot;schedule-pool-%d&quot;</span>).daemon(<span class="keyword">true</span>).build())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Runnable r, Throwable t)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.afterExecute(r, t);</span><br><span class="line">                Threads.printException(r, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> TtlExecutors.getTtlScheduledExecutorService(scheduledExecutorService);</span><br><span class="line">    &#125;<span class="comment">//method</span></span><br><span class="line">&#125;<span class="comment">//class</span></span><br></pre></td></tr></table></figure>

<h2 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> <span class="keyword">extends</span> <span class="title">AsyncConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回你替换过的 executor</span></span><br><span class="line">        <span class="comment">//或者用默认线程池 然后设置 TaskDecorator</span></span><br><span class="line">		<span class="keyword">return</span> threadPoolTaskExecutor;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="MQ传递"><a href="#MQ传递" class="headerlink" title="MQ传递"></a>MQ传递</h2><p>我的mq调用都是用的 json格式数据</p>
<p>传输数据时携带上 追踪码即可</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>跨线程</p>
<p>使用 阿里的 TransmittableThreadLocal </p>
<p>把有提供 回调修饰的方法用 TransmittableThreadLocal提供的工具修饰一下</p>
<p>ThreadLocal&lt;&gt;  替换为 TransmittableThreadLocal&lt;&gt;</p>
<p>再把 所有使用的线程池 换成自己的线程池即可</p>
<p>替换线程池 和 修饰 Callable/Runnable 二者实现其一即可</p>
<p>Hystrix的线程池我就没有替换 而是修饰了 Callable</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>日志追踪</tag>
        <tag>分布式</tag>
        <tag>链路追踪</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>request多次读取</title>
    <url>/2020/11/30/2020-11-30%20%20Request%E5%A4%9A%E6%AC%A1%E8%AF%BB%E5%8F%96%E7%9A%84%E9%97%AE%E9%A2%98%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>Feign 请求 响应的项目报错</p>
<p><code> JSON parse error: Illegal character ((CTRL-CHAR, code 31)): only regular white space (\r, \n, \t) is allowed between tokens; nested exception is com.fasterxml.jackson.core.JsonParseException: Illegal character ((CTRL-CHAR, code 31)): only regular white space (\r, \n, \t) is allowed between tokens  at [Source: (PushbackInputStream); line: 1, column: 2]</code></p>
<p>还以为是Json使用的对应不上</p>
<p>截取请求的 InputStream 发现 是Gzip的乱码</p>
<p>原来是 Feign 发送的参数较多 自己启用了 Gzip压缩</p>
<p>但是接受时并没有判断 request.Header 里面有没有 Gzip</p>
<p>查了网上其他的回答</p>
<p><a href="https://www.jianshu.com/p/df37eb5f2169">https://www.jianshu.com/p/df37eb5f2169</a></p>
<p>说是 SpringCloud版升级到Hoxton即可</p>
<p>但我的项目本身 SpringCloud 版本一直都是 Hoxton.SR8</p>
<p>还是不行</p>
<p>想了一下觉得 Feign应该只是封装调用请求的方式</p>
<p>毕竟 提供接口给Feign的方法也能被其他http请求调用</p>
<p>那就直接 搜索一下 Springboot gzip解压http 请求</p>
<h3 id="编写Filter"><a href="#编写Filter" class="headerlink" title="编写Filter"></a>编写Filter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * GZIP处理Filter</span><br><span class="line"> *&#x2F;</span><br><span class="line">@WebFilter(filterName &#x3D; &quot;httpServletGzipFilter&quot;, urlPatterns &#x3D; &quot;&#x2F;&quot;)</span><br><span class="line">public class HttpServletGzipFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        chain.doFilter(new HttpServletRequestWrapper((HttpServletRequest) request), response);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig arg0) throws ServletException &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">class HttpServletRequestWrapper extends javax.servlet.http.HttpServletRequestWrapper &#123;</span><br><span class="line">    private HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    public HttpServletRequestWrapper(HttpServletRequest request) &#123;</span><br><span class="line">        super(request);</span><br><span class="line">        this.request &#x3D; request;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 根据 request header 的 Content-Encoding 判断是否启用 gzip 解压数据流</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class="line">        ServletInputStream stream &#x3D; request.getInputStream();</span><br><span class="line">        String contentEncoding &#x3D; request.getHeader(&quot;Content-Encoding&quot;);</span><br><span class="line">        if (null !&#x3D; contentEncoding &amp;&amp; contentEncoding.indexOf(&quot;gzip&quot;) !&#x3D; -1) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                final GZIPInputStream gzipInputStream &#x3D; new GZIPInputStream(stream);</span><br><span class="line">                ServletInputStream newStream &#x3D; new ServletInputStream() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public int read() throws IOException &#123;</span><br><span class="line">                        return gzipInputStream.read();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean isFinished() &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean isReady() &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void setReadListener(ReadListener readListener) &#123;&#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                return newStream;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;uncompress content fail.&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return stream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注册Filter交给Spring管理"><a href="#注册Filter交给Spring管理" class="headerlink" title="注册Filter交给Spring管理"></a>注册Filter交给Spring管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class HttpServletFilterConfig &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 注册 HttpServletFilter</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean filterRegistrationBean() &#123;</span><br><span class="line">        FilterRegistrationBean registrationBean &#x3D; new FilterRegistrationBean();</span><br><span class="line">        registrationBean.setFilter(new HttpServletGzipFilter());</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; urlPatterns &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        urlPatterns.add(&quot;&#x2F;*&quot;);</span><br><span class="line">        registrationBean.setUrlPatterns(urlPatterns);</span><br><span class="line"></span><br><span class="line">        return registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来按原先的 @RequestBody 即可正常获得数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@MysdInterior</span><br><span class="line">    @PostMapping (&quot;place&quot;)</span><br><span class="line">    @ApiOperation(value &#x3D; &quot;生成订单&quot;, notes &#x3D; &quot;提交订单加入数据库&quot;)</span><br><span class="line">    public PlaceOrderVo place(@RequestBody PlaceOrderVo vo) &#123;</span><br><span class="line">        System.out.println(vo);</span><br><span class="line">            log.info(&quot;mall api 生成订单 ： place()&quot;);</span><br><span class="line">            log.info(&quot;参数 ：&quot; + String.valueOf(JSONUtil.parse(vo)));</span><br><span class="line">        return vo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>RequestBody</tag>
      </tags>
  </entry>
  <entry>
    <title>Java上传文件临时文件目录丢失</title>
    <url>/2021/02/25/2021-02-25%20Java%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B8%A2%E5%A4%B1/</url>
    <content><![CDATA[<span id="more"></span>

<blockquote>
<p>java.lang.RuntimeException: java.nio.file.NoSuchFileException: /tmp/undertow.16318593944131808257.9002/undertow8460611219768761359upload</p>
</blockquote>
<p>上传文件时突然出现此异常</p>
<p>原因网上讲的都很明白</p>
<p>linux 把 tmp 回收了</p>
<p>路径不存在了</p>
<p>不过他们的解决方式都不是我喜欢的</p>
<blockquote>
<p>在 applicaiton.yml(applicaiton.property) 中添加配置 ：</p>
<p>spring:</p>
<p>  servlet:</p>
<p>​    multipart:</p>
<p>​      location: /data/tmp</p>
<p>手动指定目录后，必须保证该目录存在，并有读写的权限，创建该目录 mkdir -p /data/tmp</p>
</blockquote>
<p>在配置文件中加配置还要指定目录 感觉不是很方便</p>
<p>附上我自己的解决方式</p>
<p>在 jar 目录下生成临时文件夹  不会被 linux回收 也不需要指定固定路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.MultipartConfigElement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.MultipartConfigFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ResourceUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.unit.DataSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	Environment env;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		MultipartConfigFactory factory = <span class="keyword">new</span> MultipartConfigFactory();</span><br><span class="line">		factory.setMaxFileSize(DataSize.parse(<span class="string">&quot;1024MB&quot;</span>));</span><br><span class="line">		factory.setMaxRequestSize(DataSize.parse(<span class="string">&quot;1024MB&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 临时文件存放路径 System.getProperty(&quot;java.io.tmpdir&quot;)</span></span><br><span class="line">		<span class="comment">//factory.setLocation(System.getProperty(&quot;java.io.tmpdir&quot;));</span></span><br><span class="line">		</span><br><span class="line">		String jar_parent = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			jar_parent = <span class="keyword">new</span> File(ResourceUtils.getURL(<span class="string">&quot;classpath:&quot;</span>).getPath()).getParentFile().getParentFile().getParent();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//防止项目启动时间过长 /temp 下生成的  /temp/容器名称xxx/ 目录被系统自动回收删除 导致 FileNotFoundException</span></span><br><span class="line">		String path =jar_parent + File.separator + <span class="string">&quot;temp&quot;</span> + File.separator + env.getProperty(<span class="string">&quot;spring.application.name&quot;</span>);</span><br><span class="line">		FileUtil.mkdir(path);</span><br><span class="line">		factory.setLocation(path);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> factory.createMultipartConfig();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>TensorFlow Java</title>
    <url>/2021/04/14/2021-04-14%20TensorFlow%20Java/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>先捋清楚 java tensorflow 的依赖关系</p>
<p>Maven集成 Tensorflow</p>
<p>以前是引入 tensorflow 里面是 libtensorflow 和 tensorflow_jni</p>
<p>最新的 tensorflow java 独立于 tensorflow仓库进行更新 </p>
<p>引入要改为 tensorflow-core-platform 里面其实就是 tensorflow-java 和 各个平台的 javacpp</p>
<p>就是 java的Api 和TensorFlow大版本没有关系了 tensorflow java 0.3.0 -&gt; 0.4.0 都是 2.4.1的Tensoflow</p>
<p>以前的 libtensorflow 版本是跟着Tensoflow大版本更新的 </p>
<h2 id="HelloTensorFlow"><a href="#HelloTensorFlow" class="headerlink" title="HelloTensorFlow"></a>HelloTensorFlow</h2><p><a href="https://www.tensorflow.org/install/lang_java?hl=zh_cn">https://www.tensorflow.org/install/lang_java?hl=zh_cn</a></p>
<p>官网给的第一个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.tensorflow.ConcreteFunction;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.Signature;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.Tensor;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.TensorFlow;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.op.Ops;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.op.core.Placeholder;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.op.math.Add;</span><br><span class="line"><span class="keyword">import</span> org.tensorflow.types.TInt32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTensorFlow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello TensorFlow &quot;</span> + TensorFlow.version());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (ConcreteFunction dbl = ConcreteFunction.create(HelloTensorFlow::dbl);</span><br><span class="line">        Tensor&lt;TInt32&gt; x = TInt32.scalarOf(<span class="number">10</span>);</span><br><span class="line">        Tensor&lt;TInt32&gt; dblX = dbl.call(x).expect(TInt32.DTYPE)) &#123;</span><br><span class="line">      System.out.println(x.data().getInt() + <span class="string">&quot; doubled is &quot;</span> + dblX.data().getInt());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Signature <span class="title">dbl</span><span class="params">(Ops tf)</span> </span>&#123;</span><br><span class="line">    Placeholder&lt;TInt32&gt; x = tf.placeholder(TInt32.DTYPE);</span><br><span class="line">    Add&lt;TInt32&gt; dblX = tf.math.add(x, x);</span><br><span class="line">    <span class="keyword">return</span> Signature.builder().input(<span class="string">&quot;x&quot;</span>, x).output(<span class="string">&quot;dbl&quot;</span>, dblX).build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这个例子就已经出错了 正确的应该是:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTensorFlow</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello TensorFlow &quot;</span> + TensorFlow.version());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> (ConcreteFunction dbl = ConcreteFunction.create(HelloTensorFlow::dbl);</span><br><span class="line">				TInt32 x = TInt32.scalarOf(<span class="number">10</span>);</span><br><span class="line">				Tensor dblX = dbl.call(x)) &#123;</span><br><span class="line">			System.out.println(x.getInt() + <span class="string">&quot; doubled is &quot;</span> + ((TInt32) dblX).getInt());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Signature <span class="title">dbl</span><span class="params">(Ops tf)</span> </span>&#123;</span><br><span class="line">		Placeholder&lt;TInt32&gt; x = tf.placeholder(TInt32.class);</span><br><span class="line">		Add&lt;TInt32&gt; dblX = tf.math.add(x, x);</span><br><span class="line">		<span class="keyword">return</span> Signature.builder().input(<span class="string">&quot;x&quot;</span>, x).output(<span class="string">&quot;dbl&quot;</span>, dblX).build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>待编写…</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 语法糖</title>
    <url>/1899/11/30/0000-00-00%20Java%20%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Java-语法糖"><a href="#Java-语法糖" class="headerlink" title="Java 语法糖"></a><strong>Java 语法糖</strong></h1><p>[TOC]</p>
<h2 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h2><p>​    <a href="https://www.runoob.com/java/java8-new-features.html">https://www.runoob.com/java/java8-new-features.html</a></p>
<h2 id="Java9"><a href="#Java9" class="headerlink" title="Java9"></a>Java9</h2><p>​    <a href="https://www.runoob.com/java/java9-new-features.html">https://www.runoob.com/java/java9-new-features.html</a></p>
<h3 id="改进的-try-with-resources"><a href="#改进的-try-with-resources" class="headerlink" title="改进的 try-with-resources"></a>改进的 try-with-resources</h3><p>try-with-resources 是 JDK 7 中一个新的异常处理机制，它能够很容易地关闭在 try-catch 语句块中使用的资源。所谓的资源（resource）是指在程序完成后，必须关闭的对象。try-with-resources 语句确保了每个资源在语句结束时关闭。所有实现了 java.lang.AutoCloseable 接口（其中，它包括实现了 java.io.Closeable 的所有对象），可以使用作为资源。</p>
<p>try-with-resources 声明在 JDK 9 已得到改进。如果你已经有一个资源是 final 或等效于 final 变量,您可以在 try-with-resources 语句中使用该变量，而无需在 try-with-resources 语句中声明一个新变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(inputString);</span><br><span class="line"><span class="keyword">try</span> (BufferedReader br1 = br) &#123;</span><br><span class="line">	<span class="keyword">return</span> br1.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(inputString);</span><br><span class="line"><span class="keyword">try</span> (br) &#123;</span><br><span class="line">	<span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Java10"><a href="#Java10" class="headerlink" title="Java10"></a>Java10</h2><h3 id="var-局部变量类型推断（JEP-286）"><a href="#var-局部变量类型推断（JEP-286）" class="headerlink" title="var 局部变量类型推断（JEP 286）"></a>var 局部变量类型推断（JEP 286）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// inferred value ArrayList&lt;String&gt;</span></span><br><span class="line"><span class="comment">// Index of Enhanced For Loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> number : numbers) &#123;</span><br><span class="line">    System.out.println(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Local variable declared in a loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.size(); i++) &#123;</span><br><span class="line">    System.out.println(numbers.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h2 id="Java14"><a href="#Java14" class="headerlink" title="Java14"></a><strong>Java14</strong></h2><h3 id="instanceof-模式匹配"><a href="#instanceof-模式匹配" class="headerlink" title="instanceof 模式匹配        "></a><strong>instanceof 模式匹配</strong>        <!--14预览 15正式--></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;            	<span class="comment">// comparison</span></span><br><span class="line">        String s = (String) obj;              	<span class="comment">// New variable &amp; explicit casting</span></span><br><span class="line">        System.out.println(s.toUpperCase());  	<span class="comment">// access member</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简写后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s) &#123;            	<span class="comment">// comparison</span></span><br><span class="line">        System.out.println(s.toUpperCase());  	<span class="comment">// access member</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (obj <span class="keyword">instanceof</span> Keyboard other &amp;&amp; </span><br><span class="line">		model.equals(other.model) &amp;&amp; </span><br><span class="line">		price == other.price);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="Records"><a href="#Records" class="headerlink" title="Records    "></a><strong>Records</strong>    <!--预览--></h3><p>我们先来看看现在我们如何声明一个数据类：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Range</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    private final int min;</span><br><span class="line">    private final int max;</span><br><span class="line"></span><br><span class="line">    public <span class="function"><span class="title">Range</span>(<span class="params">int min, int max</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.min = min;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">getMin</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">getMax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean <span class="function"><span class="title">equals</span>(<span class="params"><span class="built_in">Object</span> o</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Range range = (Range) o;</span><br><span class="line">        <span class="keyword">return</span> min == range.min &amp;&amp; max == range.max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int <span class="function"><span class="title">hashCode</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public <span class="built_in">String</span> <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Range&#123;&quot;</span> +</span><br><span class="line">          <span class="string">&quot;min=&quot;</span> + min +</span><br><span class="line">          <span class="string">&quot;, max=&quot;</span> + max +</span><br><span class="line">          <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来看看这个类的特点：</p>
<ul>
<li>没有无参构造方法，需要初始化时对成员变量赋值</li>
<li>成员变量只有 <strong>getter</strong> 方法。</li>
<li>覆写了 超类 <code>Object</code> 的 <code>equals</code> 、<code>hashCode</code>、<code>toString</code> 方法。</li>
</ul>
<p>虽然我们可以借助于第三方框架或者 <strong>IDE</strong> 很容易编写这些样板代码，但是总归要写这些样板代码不是吗?</p>
<p>上面的冗长的代码在 <strong>Java 14</strong> 中我们可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public record <span class="function"><span class="title">Range</span>(<span class="params">int min, int max</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>没错就是这个简单！这个语法糖是不是有 “卧槽” 的感觉？我们声明这种类使用 <strong>record</strong> 标识（目前不知道 record 会不会上升到关键字的高度）。当你用 <strong>record</strong> 声明一个类时，该类将自动拥有以下功能：</p>
<ul>
<li>获取成员变量的简单方法，以上面代码为例 <code>min()</code> 和 <code>max()</code> 。注意区别于我们平常<strong>getter</strong>的写法。</li>
<li>一个 <code>equals</code> 方法的实现，执行比较时会比较该类的所有成员属性</li>
<li>重写 <code>equals</code> 当然要重写 <code>hashCode</code></li>
<li>一个可以打印该类所有成员属性的 <code>toString</code> 方法。</li>
<li>请注意只会有一个构造方法。</li>
</ul>
<p>因为这个特性是 <strong>preview feature</strong>，默认情况下是无法编译和执行的。同样以上面为例我们需要执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ javac -d classes --enable-preview --release <span class="number">14</span> Range.java</span><br><span class="line">$ java -classpath classes --enable-preview Range</span><br></pre></td></tr></table></figure>

<p>在 <strong>Jshell</strong> 中运行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jshell&gt; Range r = <span class="keyword">new</span> Range(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">r ==&gt; Range[min=<span class="number">10</span>, max=<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">jshell&gt; r.min()</span><br><span class="line">$<span class="number">5</span> ==&gt; <span class="number">10</span></span><br><span class="line"></span><br><span class="line">jshell&gt; r.toString()</span><br><span class="line">$<span class="number">6</span> ==&gt; <span class="string">&quot;Range[min=10, max=20]&quot;</span></span><br><span class="line"></span><br><span class="line">jshell&gt; r</span><br><span class="line">r ==&gt; Range[min=<span class="number">10</span>, max=<span class="number">20</span>]</span><br></pre></td></tr></table></figure>

<p>虽然 <strong>record</strong> 声明的类没有 <code>final</code> 关键字，实际上它是一个不可变类。除了一些限制外，它依旧是一个普通的<code>Java</code> 类。因此，我们可以像添加普通类一样添加逻辑。我们可以在构造实例时强制执行前提条件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public record <span class="function"><span class="title">Range</span>(<span class="params">int min, int max</span>)</span> &#123;</span><br><span class="line">    public Range &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt;= max)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;min should be less than max&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外我们也可以给 <strong>Records</strong> 类增加普通方法、静态属性、静态方法，这里不再举例；</p>
<p><strong>为了简化语法糖的推理，不能在类内声明成员属性。</strong>以下是错误的示范：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public record <span class="function"><span class="title">Range</span>(<span class="params">int min, int max</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 错误的示范</span></span><br><span class="line">    private <span class="built_in">String</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>语法糖</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript简写优化</title>
    <url>/1899/11/30/0000-00-00%20JavaScript%E7%AE%80%E5%86%99%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="1-如果有多个条件"><a href="#1-如果有多个条件" class="headerlink" title="1.如果有多个条件"></a>1.如果有多个条件</h2><p>我们可以在数组中存储多个值，并且可以使用数组 <code>include</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Longhand</span><br><span class="line">if (x &#x3D;&#x3D;&#x3D; &#39;abc&#39; || x &#x3D;&#x3D;&#x3D; &#39;def&#39; || x &#x3D;&#x3D;&#x3D; &#39;ghi&#39; || x &#x3D;&#x3D;&#x3D;&#39;jkl&#39;) &#123;</span><br><span class="line">  &#x2F;&#x2F;logic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand</span><br><span class="line">if ([&#39;abc&#39;, &#39;def&#39;, &#39;ghi&#39;, &#39;jkl&#39;].includes(x)) &#123;</span><br><span class="line">  &#x2F;&#x2F;logic</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-如果为真…否则简写"><a href="#2-如果为真…否则简写" class="headerlink" title="2.如果为真…否则简写"></a>2.如果为真…否则简写</h2><p>这对于我们有 <code>if-else</code> 条件，里面不包含更大的逻辑时，是一个较大的捷径。我们可以简单的使用三元运算符来实现这个简写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">let test: boolean;</span><br><span class="line">if (x &gt; 100) &#123;</span><br><span class="line">  test &#x3D; true;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  test &#x3D; false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">let test &#x3D; (x &gt; 10) ? true : false;</span><br><span class="line">&#x2F;&#x2F;or we can use directly</span><br><span class="line">let test &#x3D; x &gt; 10;</span><br><span class="line">console.log(test);</span><br></pre></td></tr></table></figure>

<p>当我们有嵌套条件时，我们可以采用这种方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x &#x3D; 300,</span><br><span class="line">test2 &#x3D; (x &gt; 100) ? &#39;greater 100&#39; : (x &lt; 50) ? &#39;less 50&#39; : &#39;between 50 and 100&#39;;</span><br><span class="line">console.log(test2); &#x2F;&#x2F; &quot;greater than 100&quot;</span><br></pre></td></tr></table></figure>

<h2 id="3-声明变量"><a href="#3-声明变量" class="headerlink" title="3.声明变量"></a>3.声明变量</h2><p>当我们要声明两个具有共同值或共同类型的变量时，可以使用此简写形式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Longhand </span><br><span class="line">let test1;</span><br><span class="line">let test2 &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand </span><br><span class="line">let test1, test2 &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h2 id="4-Null-Undefined，空检查"><a href="#4-Null-Undefined，空检查" class="headerlink" title="4.Null, Undefined，空检查"></a>4.Null, Undefined，空检查</h2><p>当我们创建新的变量时，有时我们想检查我们引用的变量的值是否为空或undefined。JavaScript确实有一个非常好的简写工具来实现这些功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">if (test1 !&#x3D;&#x3D; null || test1 !&#x3D;&#x3D; undefined || test1 !&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class="line">    let test2 &#x3D; test1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">let test2 &#x3D; test1 || &#39;&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="5-null值检查和分配默认值"><a href="#5-null值检查和分配默认值" class="headerlink" title="5.null值检查和分配默认值"></a>5.null值检查和分配默认值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let test1 &#x3D; null,</span><br><span class="line">    test2 &#x3D; test1 || &#39;&#39;;</span><br><span class="line"></span><br><span class="line">console.log(&quot;null check&quot;, test2); &#x2F;&#x2F; output will be &quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="6-undefined值检查和分配默认值"><a href="#6-undefined值检查和分配默认值" class="headerlink" title="6.undefined值检查和分配默认值"></a>6.undefined值检查和分配默认值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let test1 &#x3D; undefined,</span><br><span class="line">    test2 &#x3D; test1 || &#39;&#39;;</span><br><span class="line"></span><br><span class="line">console.log(&quot;undefined check&quot;, test2); &#x2F;&#x2F; output will be &quot;&quot;</span><br></pre></td></tr></table></figure>

<p>正常值检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let test1 &#x3D; &#39;test&#39;,</span><br><span class="line">    test2 &#x3D; test1 || &#39;&#39;;</span><br><span class="line"></span><br><span class="line">console.log(test2); &#x2F;&#x2F; output: &#39;test&#39;</span><br></pre></td></tr></table></figure>

<h2 id="7-将值分配给多个变量"><a href="#7-将值分配给多个变量" class="headerlink" title="7.将值分配给多个变量"></a>7.将值分配给多个变量</h2><p>当我们处理多个变量并希望将不同的值分配给不同的变量时，此简写技术非常有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Longhand </span><br><span class="line">let test1, test2, test3;</span><br><span class="line">test1 &#x3D; 1;</span><br><span class="line">test2 &#x3D; 2;</span><br><span class="line">test3 &#x3D; 3;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand </span><br><span class="line">let [test1, test2, test3] &#x3D; [1, 2, 3];</span><br></pre></td></tr></table></figure>

<h2 id="8-赋值运算符简写"><a href="#8-赋值运算符简写" class="headerlink" title="8.赋值运算符简写"></a>8.赋值运算符简写</h2><p>我们在编程中处理很多算术运算符，这是将运算符分配给JavaScript变量的有用技术之一。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">test1 &#x3D; test1 + 1;</span><br><span class="line">test2 &#x3D; test2 - 1;</span><br><span class="line">test3 &#x3D; test3 * 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">test1++;</span><br><span class="line">test2--;</span><br><span class="line">test3 *&#x3D; 20;</span><br></pre></td></tr></table></figure>

<h2 id="9-如果存在简写"><a href="#9-如果存在简写" class="headerlink" title="9.如果存在简写"></a>9.如果存在简写</h2><p>这是我们大家都在使用的常用简写之一，但仍然值得一提。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">if (test1 &#x3D;&#x3D;&#x3D; true) or if (test1 !&#x3D;&#x3D; &quot;&quot;) or if (test1 !&#x3D;&#x3D; null)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand &#x2F;&#x2F;it will check empty string,null and undefined too</span><br><span class="line">if (test1)</span><br></pre></td></tr></table></figure>

<p>注意：如果test1有任何值，它将在if循环后进入逻辑，该运算符主要用于 <code>null</code> 或 <code>undefined</code> 的检查。</p>
<h2 id="10-多个条件的AND（-amp-amp-）运算符"><a href="#10-多个条件的AND（-amp-amp-）运算符" class="headerlink" title="10.多个条件的AND（&amp;&amp;）运算符"></a>10.多个条件的AND（&amp;&amp;）运算符</h2><p>如果仅在变量为 <code>true</code> 的情况下才调用函数，则可以使用 <code>&amp;&amp;</code> 运算符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Longhand </span><br><span class="line">if (test1) &#123;</span><br><span class="line"> callMethod(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand </span><br><span class="line">test1 &amp;&amp; callMethod();</span><br></pre></td></tr></table></figure>

<h2 id="11-foreach循环简写"><a href="#11-foreach循环简写" class="headerlink" title="11.foreach循环简写"></a>11.foreach循环简写</h2><p>这是迭代的常用简写技术之一。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">for (var i &#x3D; 0; i &lt; testData.length; i++)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">for (let i in testData) or  for (let i of testData)</span><br></pre></td></tr></table></figure>

<p>每个变量的数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function testData(element, index, array) &#123;</span><br><span class="line">  console.log(&#39;test[&#39; + index + &#39;] &#x3D; &#39; + element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[11, 24, 32].forEach(testData);</span><br><span class="line">&#x2F;&#x2F; logs: test[0] &#x3D; 11, test[1] &#x3D; 24, test[2] &#x3D; 32</span><br></pre></td></tr></table></figure>

<h2 id="12-return中比较"><a href="#12-return中比较" class="headerlink" title="12.return中比较"></a>12.return中比较</h2><p>我们也可以在return语句中使用比较。它将避免我们的5行代码，并将它们减少到1行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">let test;</span><br><span class="line">function checkReturn() &#123;</span><br><span class="line">  if (!(test &#x3D;&#x3D;&#x3D; undefined)) &#123;</span><br><span class="line">    return test;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return callMe(&#39;test&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var data &#x3D; checkReturn();</span><br><span class="line">console.log(data); &#x2F;&#x2F;output test</span><br><span class="line">function callMe(val) &#123;</span><br><span class="line">    console.log(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">function checkReturn() &#123;</span><br><span class="line">    return test || callMe(&#39;test&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-箭头函数"><a href="#13-箭头函数" class="headerlink" title="13.箭头函数"></a>13.箭头函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Longhand </span><br><span class="line">function add(a, b) &#123; </span><br><span class="line">   return a + b; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand </span><br><span class="line">const add &#x3D; (a, b) &#x3D;&gt; a + b;</span><br></pre></td></tr></table></figure>

<p>更多示例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function callMe(name) &#123;</span><br><span class="line">  console.log(&#39;Hello&#39;, name);</span><br><span class="line">&#125;</span><br><span class="line">callMe &#x3D; name &#x3D;&gt;console.log(&#39;Hello&#39;, name);</span><br></pre></td></tr></table></figure>

<h2 id="14-短函数调用"><a href="#14-短函数调用" class="headerlink" title="14.短函数调用"></a>14.短函数调用</h2><p>我们可以使用三元运算符来实现这些功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">function test1() &#123;</span><br><span class="line">  console.log(&#39;test1&#39;);</span><br><span class="line">&#125;;</span><br><span class="line">function test2() &#123;</span><br><span class="line">  console.log(&#39;test2&#39;);</span><br><span class="line">&#125;;</span><br><span class="line">var test3 &#x3D; 1;</span><br><span class="line">if (test3 &#x3D;&#x3D; 1) &#123;</span><br><span class="line">  test1();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  test2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">(test3 &#x3D;&#x3D;&#x3D; 1? test1:test2)();</span><br></pre></td></tr></table></figure>

<h2 id="15-Switch简写"><a href="#15-Switch简写" class="headerlink" title="15. Switch简写"></a>15. Switch简写</h2><p>我们可以将条件保存在键值对象中，并可以根据条件使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">switch (data) &#123;</span><br><span class="line">  case1:</span><br><span class="line">    test1();</span><br><span class="line">  break;</span><br><span class="line"></span><br><span class="line">  case2:</span><br><span class="line">    test2();</span><br><span class="line">  break;</span><br><span class="line"></span><br><span class="line">  case3:</span><br><span class="line">    test();</span><br><span class="line">  break;</span><br><span class="line">  &#x2F;&#x2F; And so on...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">var data &#x3D; &#123;</span><br><span class="line">  1: test1,</span><br><span class="line">  2: test2,</span><br><span class="line">  3: test</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">data[something] &amp;&amp; data[something]();</span><br></pre></td></tr></table></figure>

<h2 id="16-隐式返回简写"><a href="#16-隐式返回简写" class="headerlink" title="16.隐式返回简写"></a>16.隐式返回简写</h2><p>使用箭头函数，我们可以直接返回值，而不必编写return语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand</span><br><span class="line">function calculate(diameter) &#123;</span><br><span class="line">  returnMath.PI * diameter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line">calculate &#x3D; diameter &#x3D;&gt; (</span><br><span class="line">  Math.PI * diameter;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="17-小数基数指数"><a href="#17-小数基数指数" class="headerlink" title="17.小数基数指数"></a>17.小数基数指数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">for (var i &#x3D; 0; i &lt; 10000; i++) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">for (var i &#x3D; 0; i &lt; 1e4; i++) &#123;</span><br></pre></td></tr></table></figure>

<h2 id="18-默认参数值"><a href="#18-默认参数值" class="headerlink" title="18.默认参数值"></a>18.默认参数值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Longhand</span><br><span class="line">function add(test1, test2) &#123;</span><br><span class="line">  if (test1 &#x3D;&#x3D;&#x3D; undefined)</span><br><span class="line">    test1 &#x3D; 1;</span><br><span class="line">  if (test2 &#x3D;&#x3D;&#x3D; undefined)</span><br><span class="line">    test2 &#x3D; 2;</span><br><span class="line">  return test1 + test2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line">add &#x3D; (test1 &#x3D; 1, test2 &#x3D; 2) &#x3D;&gt; (test1 + test2);</span><br><span class="line">add() &#x2F;&#x2F;output: 3</span><br></pre></td></tr></table></figure>

<h2 id="19-扩展运算符简写"><a href="#19-扩展运算符简写" class="headerlink" title="19.扩展运算符简写"></a>19.扩展运算符简写</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; joining arrays using concat</span><br><span class="line">const data &#x3D; [1, 2, 3];</span><br><span class="line">const test &#x3D; [4 ,5 , 6].concat(data);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; joining arrays</span><br><span class="line">const data &#x3D; [1, 2, 3];</span><br><span class="line">const test &#x3D; [4 ,5 , 6, ...data];</span><br><span class="line">console.log(test); &#x2F;&#x2F; [ 4, 5, 6, 1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>对于克隆，我们也可以使用扩展运算符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; cloning arrays</span><br><span class="line">const test1 &#x3D; [1, 2, 3];</span><br><span class="line">const test2 &#x3D; test1.slice()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; cloning arrays</span><br><span class="line">const test1 &#x3D; [1, 2, 3];</span><br><span class="line">const test2 &#x3D; [...test1];</span><br></pre></td></tr></table></figure>

<h2 id="20-模板文字"><a href="#20-模板文字" class="headerlink" title="20.模板文字"></a>20.模板文字</h2><p>如果您厌倦了在单个字符串中使用 <code>+</code> 来连接多个变量，那么这种简写可以消除您的头痛。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand</span><br><span class="line">const welcome &#x3D; &#39;Hi &#39; + test1 + &#39; &#39; + test2 + &#39;.&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line">const welcome &#x3D; &#96;Hi $&#123;test1&#125; $&#123;test2&#125;&#96;;</span><br></pre></td></tr></table></figure>

<h2 id="21-多行字符串简写"><a href="#21-多行字符串简写" class="headerlink" title="21.多行字符串简写"></a>21.多行字符串简写</h2><p>当我们在代码中处理多行字符串时，可以使用以下功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand</span><br><span class="line">const data &#x3D; &#39;abc abc abc abc abc abc\n\t&#39;</span><br><span class="line">    + &#39;test test,test test test test\n\t&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line">const data &#x3D; &#96;abc abc abc abc abc abc</span><br><span class="line">         test test,test test test test&#96;</span><br></pre></td></tr></table></figure>

<h2 id="22-对象属性分配"><a href="#22-对象属性分配" class="headerlink" title="22.对象属性分配"></a>22.对象属性分配</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let test1 &#x3D; &#39;a&#39;; </span><br><span class="line">let test2 &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Longhand </span><br><span class="line">let obj &#x3D; &#123;test1: test1, test2: test2&#125;; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand </span><br><span class="line">let obj &#x3D; &#123;test1, test2&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="23-将字符串转换成数字"><a href="#23-将字符串转换成数字" class="headerlink" title="23.将字符串转换成数字"></a>23.将字符串转换成数字</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Longhand </span><br><span class="line">let test1 &#x3D; parseInt(&#39;123&#39;); </span><br><span class="line">let test2 &#x3D; parseFloat(&#39;12.3&#39;); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand </span><br><span class="line">let test1 &#x3D; +&#39;123&#39;; </span><br><span class="line">let test2 &#x3D; +&#39;12.3&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="24-用解构简写"><a href="#24-用解构简写" class="headerlink" title="24.用解构简写"></a>24.用解构简写</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand</span><br><span class="line">const test1 &#x3D; this.data.test1;</span><br><span class="line">const test2 &#x3D; this.data.test2;</span><br><span class="line">const test2 &#x3D; this.data.test3;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line">const &#123; test1, test2, test3 &#125; &#x3D; this.data;</span><br></pre></td></tr></table></figure>

<h2 id="25-用Array-find简写"><a href="#25-用Array-find简写" class="headerlink" title="25.用Array.find简写"></a>25.用Array.find简写</h2><p>当我们确实有一个对象数组并且我们想要根据对象属性查找特定对象时，find方法确实很有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const data &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &#39;test1&#39;,</span><br><span class="line">    name: &#39;abc&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: &#39;test2&#39;,</span><br><span class="line">    name: &#39;cde&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: &#39;test1&#39;,</span><br><span class="line">    name: &#39;fgh&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line">function findtest1(name) &#123;</span><br><span class="line">  for (let i &#x3D; 0; i &lt; data.length; ++i) &#123;</span><br><span class="line">    if (data[i].type &#x3D;&#x3D;&#x3D; &#39;test1&#39; &amp;&amp; data[i].name &#x3D;&#x3D;&#x3D; name) &#123;</span><br><span class="line">      return data[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand</span><br><span class="line">filteredData &#x3D; data.find(data &#x3D;&gt; data.type &#x3D;&#x3D;&#x3D; &#39;test1&#39; &amp;&amp; data.name &#x3D;&#x3D;&#x3D; &#39;fgh&#39;);</span><br><span class="line">console.log(filteredData); &#x2F;&#x2F; &#123; type: &#39;test1&#39;, name: &#39;fgh&#39; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="26-查找条件简写"><a href="#26-查找条件简写" class="headerlink" title="26.查找条件简写"></a>26.查找条件简写</h2><p>如果我们有代码来检查类型，根据类型需要调用不同的方法，我们可以选择使用多个else ifs或者switch，但是如果我们有比这更好的简写方法呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">if (type &#x3D;&#x3D;&#x3D; &#39;test1&#39;) &#123;</span><br><span class="line">  test1();</span><br><span class="line">&#125;</span><br><span class="line">elseif (type &#x3D;&#x3D;&#x3D; &#39;test2&#39;) &#123;</span><br><span class="line">  test2();</span><br><span class="line">&#125;</span><br><span class="line">elseif (type &#x3D;&#x3D;&#x3D; &#39;test3&#39;) &#123;</span><br><span class="line">  test3();</span><br><span class="line">&#125;</span><br><span class="line">elseif (type &#x3D;&#x3D;&#x3D; &#39;test4&#39;) &#123;</span><br><span class="line">  test4();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  thrownewError(&#39;Invalid value &#39; + type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">var types &#x3D; &#123;</span><br><span class="line">  test1: test1,</span><br><span class="line">  test2: test2,</span><br><span class="line">  test3: test3,</span><br><span class="line">  test4: test4</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">var func &#x3D; types[type];</span><br><span class="line">(!func) &amp;&amp; thrownewError(&#39;Invalid value &#39; + type); func();</span><br></pre></td></tr></table></figure>

<h2 id="27-按位索引简写"><a href="#27-按位索引简写" class="headerlink" title="27.按位索引简写"></a>27.按位索引简写</h2><p>当我们遍历数组以查找特定值时，我们确实使用 <code>indexOf()</code> 方法，如果找到更好的方法该怎么办？让我们看看这个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand</span><br><span class="line">if(arr.indexOf(item) &gt; -1) &#123; &#x2F;&#x2F; item found </span><br><span class="line">&#125;</span><br><span class="line">if(arr.indexOf(item) &#x3D;&#x3D;&#x3D; -1) &#123; &#x2F;&#x2F; item not found</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line">if(~arr.indexOf(item)) &#123; &#x2F;&#x2F; item found</span><br><span class="line">&#125;</span><br><span class="line">if(!~arr.indexOf(item)) &#123; &#x2F;&#x2F; item not found</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按位（<code>〜</code>）运算符将返回除-1以外的任何值的真实值。否定它就像做 <code>~~</code> 一样简单。另外，我们也可以使用 <code>include()</code> 函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (arr.includes(item)) &#123; </span><br><span class="line">	&#x2F;&#x2F; true if the item found</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="28-Object-entries"><a href="#28-Object-entries" class="headerlink" title="28.Object.entries()"></a>28.Object.entries()</h2><p>此函数有助于将对象转换为对象数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const data &#x3D; &#123; test1: &#39;abc&#39;, test2: &#39;cde&#39;, test3: &#39;efg&#39; &#125;;</span><br><span class="line">const arr &#x3D; Object.entries(data);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;** Output:</span><br><span class="line">[ [ &#39;test1&#39;, &#39;abc&#39; ],</span><br><span class="line">  [ &#39;test2&#39;, &#39;cde&#39; ],</span><br><span class="line">  [ &#39;test3&#39;, &#39;efg&#39; ]</span><br><span class="line">]</span><br><span class="line">**&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="29-Object-values"><a href="#29-Object-values" class="headerlink" title="29.Object.values()"></a>29.Object.values()</h2><p>这也是ES8中引入的一项新功能，该功能执行与 <code>Object.entries()</code> 类似的功能，但没有关键部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const data &#x3D; &#123; test1: &#39;abc&#39;, test2: &#39;cde&#39; &#125;;</span><br><span class="line">const arr &#x3D; Object.values(data);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;** Output:</span><br><span class="line">[ &#39;abc&#39;, &#39;cde&#39;]</span><br><span class="line">**&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="30-双按位简写"><a href="#30-双按位简写" class="headerlink" title="30.双按位简写"></a>30.双按位简写</h2><p>双重NOT按位运算符方法仅适用于32位整数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Longhand</span><br><span class="line">Math.floor(1.9) &#x3D;&#x3D;&#x3D; 1&#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shorthand</span><br><span class="line">~~1.9 &#x3D;&#x3D;&#x3D; 1&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h2 id="31-重复一个字符串多次"><a href="#31-重复一个字符串多次" class="headerlink" title="31.重复一个字符串多次"></a>31.重复一个字符串多次</h2><p>要一次又一次地重复相同的字符，我们可以使用for循环并将它们添加到同一循环中，但是如果我们有一个简写方法呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand </span><br><span class="line">let test &#x3D; &#39;&#39;; </span><br><span class="line">for(let i &#x3D; 0; i &lt; 5; i ++) &#123; </span><br><span class="line">  test +&#x3D; &#39;test &#39;; </span><br><span class="line">&#125; </span><br><span class="line">console.log(str); &#x2F;&#x2F; test test test test test </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand </span><br><span class="line">&#39;test &#39;.repeat(5);</span><br></pre></td></tr></table></figure>

<h2 id="32-在数组中查找最大值和最小值"><a href="#32-在数组中查找最大值和最小值" class="headerlink" title="32.在数组中查找最大值和最小值"></a>32.在数组中查找最大值和最小值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr &#x3D; [1, 2, 3]; </span><br><span class="line">Math.max(…arr); &#x2F;&#x2F; 3</span><br><span class="line">Math.min(…arr); &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<h2 id="33-从字符串中获取字符"><a href="#33-从字符串中获取字符" class="headerlink" title="33.从字符串中获取字符"></a>33.从字符串中获取字符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let str &#x3D; &#39;abc&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Longhand </span><br><span class="line">str.charAt(2); &#x2F;&#x2F; c</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shorthand </span><br><span class="line">Note: If we know the index of the array then we can directly use index insted of character.If we are not sure about index it can throwundefined</span><br><span class="line">str[2]; &#x2F;&#x2F; c</span><br></pre></td></tr></table></figure>

<h2 id="34-数学指数幂函数的简写"><a href="#34-数学指数幂函数的简写" class="headerlink" title="34.数学指数幂函数的简写"></a>34.数学指数幂函数的简写</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;longhand</span><br><span class="line">Math.pow(2,3); &#x2F;&#x2F; 8</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;shorthand</span><br><span class="line">2**3&#x2F;&#x2F; 8</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>语法糖</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax请求合并</title>
    <url>/2021/03/12/2021-03-12%20Ajax%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<span id="more"></span>


<p>线上项目 首页加载时 请求了9个接口 刷新首页 请求数刷刷的往上涨</p>
<p>没几下就被我的后台限流策略屏蔽了 为了限流能正常工作  便需要把首页的请求进行合并</p>
<p>首先考虑到要不影响线上功能并且改动较小</p>
<p><strong>对原接口不做任何改动</strong></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>前端拦截所有Ajax请求 合并统一发送 存储各自的 promise 后端统一返回后再 各自回调</p>
<p>后端提供一个通用接口 /index/wilful  返回多个返回值</p>
<p><strong>请求参数为:</strong> <em>路径和原来的参数</em></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/mp/content/detail&quot;</span>,    <span class="comment">//原请求路径</span></span><br><span class="line">        <span class="attr">&quot;param&quot;</span>: &#123;						 <span class="comment">//原请求参数</span></span><br><span class="line">            <span class="attr">&quot;mallId&quot;</span>: <span class="number">48</span>, </span><br><span class="line">            <span class="attr">&quot;sectionKey&quot;</span>: <span class="string">&quot;home_banner&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;									 <span class="comment">//多个同理</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/game/turntable/details&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;param&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;mallId&quot;</span>: <span class="string">&quot;55&quot;</span>, </span><br><span class="line">            <span class="attr">&quot;itemId&quot;</span>: <span class="string">&quot;111&quot;</span>, </span><br><span class="line">            <span class="attr">&quot;activityId&quot;</span>: <span class="string">&quot;222&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>返回值:</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ver&quot;</span>: <span class="string">&quot;1.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;t&quot;</span>: <span class="number">1618451056360</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;/game/turntable/details&quot;</span>: &#123;		<span class="comment">//对应多个请求的原始url 内部为原始请求的返回值</span></span><br><span class="line">            <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;success&quot;</span>,				<span class="comment">//只代表此接口的成功失败</span></span><br><span class="line">            <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;turntable&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                ...</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;prizes&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;id&quot;</span>: <span class="number">12</span>,</span><br><span class="line">                    <span class="attr">&quot;turntableId&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">                    ...</span><br><span class="line">                &#125;,</span><br><span class="line">                ...</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;/mp/content/detail&quot;: &#123;</span><br><span class="line">            &quot;msg&quot;: &quot;success&quot;,</span><br><span class="line">            &quot;total&quot;: 3,</span><br><span class="line">            &quot;code&quot;: 0,</span><br><span class="line">            &quot;rows&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    ...</span><br><span class="line">                &#125;,</span><br><span class="line">                ...</span><br><span class="line">            ],</span><br><span class="line">            &quot;pageNum&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;url&quot;: &quot;/index/wilful&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把全局 request 全部转发给</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//可以判断一下 只有需要整合的接口才进 group</span></span><br><span class="line">	<span class="keyword">if</span> (options.url != <span class="string">&#x27;/index/wilful&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> uni.$httpGroup.request(&#123;</span><br><span class="line">			path: options.url,</span><br><span class="line">			param: &#123;</span><br><span class="line">				...options.data</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//原有逻辑</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//合并Ajax请求</span></span><br><span class="line"><span class="keyword">const</span> $httpGroup = &#123;</span><br><span class="line">	paramList: [],</span><br><span class="line">	resolveList: [],</span><br><span class="line">	fireRequest (data) &#123;	<span class="comment">//真正的请求</span></span><br><span class="line">		<span class="keyword">return</span> request(&#123;</span><br><span class="line">			url: <span class="string">&#x27;/index/wilful&#x27;</span>,</span><br><span class="line">			header: &#123;</span><br><span class="line">				<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">			data</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">	request (data) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//获得到第一个请求之后进行定时</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.paramList.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//收集范围 下面有说明</span></span><br><span class="line">				<span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">let</span> copyParamList = [...this.paramList];</span><br><span class="line">					<span class="keyword">let</span> copyResolveList = [...this.resolveList];</span><br><span class="line">                    <span class="comment">//清空待请求</span></span><br><span class="line">					<span class="built_in">this</span>.paramList = [];</span><br><span class="line">					<span class="built_in">this</span>.resolveList = [];</span><br><span class="line">                    <span class="comment">//请求合并接口</span></span><br><span class="line">					<span class="built_in">this</span>.fireRequest([</span><br><span class="line">						...copyParamList</span><br><span class="line">					]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">						<span class="keyword">if</span> (res &amp;&amp; res.data) &#123;</span><br><span class="line">                            <span class="comment">//成功回调所有的接口</span></span><br><span class="line">							copyParamList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">								copyResolveList[index].resolve(res.data[item.path]);</span><br><span class="line">							&#125;)</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//异常回调</span></span><br><span class="line">							copyParamList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">								copyResolveList[index].resolve(&#123;</span><br><span class="line">									code: res.code || <span class="number">500</span>,</span><br><span class="line">									data: <span class="literal">undefined</span>,</span><br><span class="line">									msg: res.msg || <span class="string">&#x27;&#x27;</span></span><br><span class="line">								&#125;);</span><br><span class="line">							&#125;)</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">this</span>.resolveList.push(&#123;</span><br><span class="line">				resolve,</span><br><span class="line">			&#125;);</span><br><span class="line">			<span class="built_in">this</span>.paramList.push(&#123;</span><br><span class="line">				...data</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>收集范围:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在本轮“事件循环”结束时执行 	JS stack级别</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve()	</span><br><span class="line"></span><br><span class="line"><span class="comment">//在有实现Microtasks的浏览器是Microtasks级别 没有就是 Task级别</span></span><br><span class="line">Vue.prototype.$nextTick(<span class="function">()=&gt;</span>&#123;&#125;)	</span><br><span class="line"></span><br><span class="line"><span class="comment">//在下一轮“事件循环”开始时执行  	Tasks级别</span></span><br><span class="line"><span class="built_in">setTimeout</span>(fn, <span class="number">0</span>)	</span><br></pre></td></tr></table></figure>

<p>更详细可以看 <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><p>大致上就是 把Ajax异步请求收集成一个数组 把整个数组全部提交到后端接口 再全部回调</p>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>后端用 SpringMVC</p>
<p>先写一个工具类 把项目中所有的 Controller 和 Controller 中的 @RequestMapping 整理出来 (不管是 @GetMapping 还是 @GetMapping 都是实现了 @RequestMapping  <!--组合注解-->)</p>
<p>再用反射注入请求参数 并执行 获得返回结果 合并接口后返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.DefaultParameterNameDiscoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.ParameterNameDiscoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotatedElementUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lqs1848.common.exception.CustomException;</span><br><span class="line"><span class="keyword">import</span> com.lqs1848.common.utils.AopTargetUtils;</span><br><span class="line"><span class="keyword">import</span> com.lqs1848.common.utils.ServletUtils;</span><br><span class="line"><span class="keyword">import</span> com.lqs1848.common.utils.bean.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> com.lqs1848.common.utils.bean.StringToClass;</span><br><span class="line"><span class="keyword">import</span> com.lqs1848.common.utils.spring.SpringContextHolder;</span><br><span class="line"><span class="keyword">import</span> com.lqs1848.common.web.domain.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 不考虑 同路径有 get又有post 2 先不考虑路径 &#123;xxx&#125; p 3 只装配基础数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Lazy(true)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebWilfulUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	ParameterNameDiscoverer parameterNameDiscoverer;</span><br><span class="line">	Map&lt;String, Box&gt; map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		parameterNameDiscoverer = <span class="keyword">new</span> DefaultParameterNameDiscoverer();</span><br><span class="line">		map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Object&gt; dealers = SpringContextHolder.getApplicationContext()</span><br><span class="line">				.getBeansWithAnnotation(Controller.class);</span><br><span class="line">		<span class="keyword">for</span> (Object controller : dealers.values()) &#123;</span><br><span class="line">			List&lt;String&gt; basePaths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			Object original = AopTargetUtils.getTarget(controller);</span><br><span class="line">			Class&lt;?&gt; cla = original.getClass();</span><br><span class="line">			RequestMapping anno = AnnotatedElementUtils.getMergedAnnotation(cla, RequestMapping.class);</span><br><span class="line">			<span class="keyword">if</span> (anno != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (String path : anno.value()) &#123;</span><br><span class="line">					basePaths.add(getPath(path));</span><br><span class="line">					<span class="comment">//System.out.println(&quot;controller path:&quot; + path);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (Method m : cla.getMethods()) &#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (m.getReturnType() == <span class="keyword">null</span> || !m.getReturnType().getName().equals(R.class.getName()))</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 待添加</span></span><br><span class="line">				<span class="comment">// ++++权限校验 feign 专用的方法不能被调用</span></span><br><span class="line">				List&lt;StringBuffer&gt; msbs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">				RequestMapping manno = (RequestMapping) getMethodAnno(m, RequestMapping.class);</span><br><span class="line">				<span class="keyword">if</span> (manno != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">if</span> (!basePaths.isEmpty()) &#123;</span><br><span class="line">						<span class="keyword">for</span> (String basePath : basePaths) &#123;</span><br><span class="line">							<span class="keyword">for</span> (String path : manno.value()) &#123;</span><br><span class="line">								msbs.add(<span class="keyword">new</span> StringBuffer(basePath).append(getPath(path)));</span><br><span class="line">							&#125; <span class="comment">//</span></span><br><span class="line">						&#125; <span class="comment">//</span></span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="keyword">for</span> (String path : manno.value()) &#123;</span><br><span class="line">							msbs.add(<span class="keyword">new</span> StringBuffer(getPath(path)));</span><br><span class="line">						&#125; <span class="comment">//</span></span><br><span class="line">					&#125; <span class="comment">//</span></span><br><span class="line">				&#125; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (StringBuffer sb : msbs) &#123;</span><br><span class="line">					map.put(sb.toString(), <span class="keyword">new</span> Box(m, controller));</span><br><span class="line">				&#125; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">			&#125; <span class="comment">// for method</span></span><br><span class="line"></span><br><span class="line">		&#125; <span class="comment">// for class</span></span><br><span class="line">	&#125;<span class="comment">// init</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> R <span class="title">getR</span><span class="params">(String path, Map&lt;String, String&gt; paramMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		Box b = matchingPath(path);</span><br><span class="line">		<span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> R.error(<span class="string">&quot;404 Url is Not Find&quot;</span>);</span><br><span class="line"></span><br><span class="line">		Class&lt;?&gt;[] clas = b.getM().getParameterTypes();</span><br><span class="line">		String[] paramStr = parameterNameDiscoverer.getParameterNames(b.getM());</span><br><span class="line"></span><br><span class="line">		List&lt;Object&gt; args = <span class="keyword">new</span> ArrayList&lt;&gt;(clas.length);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; clas.length; x++) &#123;</span><br><span class="line">			args.add(getParam(paramStr[x], clas[x], paramMap));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> (R) b.getM().invoke(b.getO(), args.toArray());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (CustomException e) &#123;</span><br><span class="line">			<span class="keyword">return</span> R.error(e.getMessage());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> R.error(<span class="string">&quot;参数不正确&quot;</span>);</span><br><span class="line">	&#125;<span class="comment">// method</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Object <span class="title">getParam</span><span class="params">(String par, Class&lt;?&gt; cla, Map&lt;String, String&gt; paramMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// by Servlet</span></span><br><span class="line">		<span class="keyword">if</span> (cla.isInstance(HttpServletRequest.class))</span><br><span class="line">			<span class="keyword">return</span> ServletUtils.getRequest();</span><br><span class="line">		<span class="keyword">if</span> (cla.isInstance(HttpServletResponse.class))</span><br><span class="line">			<span class="keyword">return</span> ServletUtils.getResponse();</span><br><span class="line">		<span class="keyword">if</span> (cla.isInstance(HttpSession.class))</span><br><span class="line">			<span class="keyword">return</span> ServletUtils.getSession();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// by Name</span></span><br><span class="line">		Object nameParam = StringToClass.call(paramMap.get(par), cla);</span><br><span class="line">		<span class="keyword">if</span> (nameParam != <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> nameParam;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// by POJO by Name</span></span><br><span class="line">		<span class="keyword">if</span> (!cla.getPackageName().startsWith(<span class="string">&quot;java.lang&quot;</span>)) &#123;</span><br><span class="line">			<span class="comment">// 不是基础类型 可以顺便判断一下是不是自己自定义包名下面的类</span></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * try &#123; Object obj = cla.getDeclaredConstructor().newInstance(); BeanMap</span></span><br><span class="line"><span class="comment">			 * beanMap = BeanMap.create(obj); beanMap.putAll(paramMap); return obj; &#125; catch</span></span><br><span class="line"><span class="comment">			 * (InstantiationException | IllegalAccessException | IllegalArgumentException |</span></span><br><span class="line"><span class="comment">			 * InvocationTargetException | NoSuchMethodException | SecurityException e) &#123;</span></span><br><span class="line"><span class="comment">			 * return null; &#125;</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Object pojo = mapToBean(paramMap, cla);</span><br><span class="line">				<span class="keyword">return</span> pojo;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">mapToBean</span><span class="params">(Map&lt;String, String&gt; map, Class&lt;?&gt; beanClass)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Object object = beanClass.getDeclaredConstructor().newInstance();</span><br><span class="line">		List&lt;Field&gt; fields = BeanUtils.getThisToObjectFies(beanClass);</span><br><span class="line">		<span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">			Object value = StringToClass.call(map.get(f.getName()), f.getType());</span><br><span class="line">			<span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">				f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">				f.set(object, value);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> object;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 路径匹配</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Box <span class="title">matchingPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 更复杂的 比如 /xxx/&#123;路径参数&#125; 这种的待添加</span></span><br><span class="line">		<span class="keyword">return</span> map.get(path);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (path == <span class="keyword">null</span> || path.isEmpty())</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (path.startsWith(<span class="string">&quot;/&quot;</span>) || path.startsWith(<span class="string">&quot;\\&quot;</span>))</span><br><span class="line">			<span class="keyword">return</span> path;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;/&quot;</span> + path;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Annotation <span class="title">getClassAnno</span><span class="params">(Class&lt;?&gt; cla, Class&lt;? extends Annotation&gt; annotationType)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> AnnotatedElementUtils.getMergedAnnotation(cla, annotationType);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Annotation res = cla.getAnnotation(annotationType); if (res != null) return</span></span><br><span class="line"><span class="comment">		 * res; for (Annotation a : cla.getAnnotations()) &#123; res =</span></span><br><span class="line"><span class="comment">		 * getClassAnno(a.getClass(), annotationType); if (res != null) return res; &#125; //</span></span><br><span class="line"><span class="comment">		 * for return null;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&#125;<span class="comment">// method</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Annotation <span class="title">getMethodAnno</span><span class="params">(Method method, Class&lt;? extends Annotation&gt; annotationType)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> AnnotatedElementUtils.getMergedAnnotation(method, annotationType);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Annotation res = method.getAnnotation(annotationType); if (res != null)</span></span><br><span class="line"><span class="comment">		 * return res; for (Annotation a : method.getAnnotations()) &#123; res =</span></span><br><span class="line"><span class="comment">		 * getClassAnno(a.getClass(), annotationType); if (res != null) return res; &#125; //</span></span><br><span class="line"><span class="comment">		 * for return null;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&#125;<span class="comment">// method</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Data</span></span><br><span class="line">	<span class="meta">@AllArgsConstructor</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">		Method m;</span><br><span class="line">		Object o;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// class</span></span><br></pre></td></tr></table></figure>

<p>其他工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToClass</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">call</span><span class="params">(String param,Class&lt;?&gt; cla)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(StringUtils.isEmpty(param)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(String.class))</span><br><span class="line">			<span class="keyword">return</span> param;</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(Integer.class) || cla.isAssignableFrom(<span class="keyword">int</span>.class))</span><br><span class="line">			<span class="keyword">return</span> Integer.valueOf(param);</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(Short.class) || cla.isAssignableFrom(<span class="keyword">short</span>.class))</span><br><span class="line">			<span class="keyword">return</span> Short.valueOf(param);</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(Long.class) || cla.isAssignableFrom(<span class="keyword">long</span>.class))</span><br><span class="line">			<span class="keyword">return</span> Long.valueOf(param);</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(Float.class) || cla.isAssignableFrom(<span class="keyword">float</span>.class))</span><br><span class="line">			<span class="keyword">return</span> Float.valueOf(param);</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(Double.class) || cla.isAssignableFrom(<span class="keyword">double</span>.class))</span><br><span class="line">			<span class="keyword">return</span> Double.valueOf(param);</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(BigDecimal.class))</span><br><span class="line">			<span class="keyword">return</span> BigDecimal.valueOf(Double.valueOf(param));</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(Boolean.class) || cla.isAssignableFrom(<span class="keyword">boolean</span>.class))</span><br><span class="line">			<span class="keyword">return</span> Boolean.valueOf(param);</span><br><span class="line">		<span class="keyword">if</span> (cla.isAssignableFrom(Byte.class) || cla.isAssignableFrom(<span class="keyword">byte</span>.class))</span><br><span class="line">			<span class="keyword">return</span> Byte.valueOf(param);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="comment">// class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUtils</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">beans</span>.<span class="title">BeanUtils</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Field&gt; <span class="title">getThisToObjectFies</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class="line">		List&lt;Field&gt; res = <span class="keyword">new</span> ArrayList&lt;Field&gt;();</span><br><span class="line">		<span class="keyword">if</span> (cls == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> res;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			res.addAll(Arrays.asList(cls.getDeclaredFields()));</span><br><span class="line">		&#125; <span class="keyword">while</span> ((cls = cls.getSuperclass()) != <span class="keyword">null</span>);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;<span class="comment">// getThisToObjectFies</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">GlobalController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Lazy(true)</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> WebWilfulUtils wilfulUtils;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping(&quot;wilful&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> R <span class="title">test</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;WilfulParam&gt; params)</span> </span>&#123;</span><br><span class="line">		Map&lt;String,R&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		params.forEach(p-&gt;&#123;</span><br><span class="line">			R mr = wilfulUtils.getR(p.getPath(), p.getParam());</span><br><span class="line">			data.put(p.getPath(), mr.pure());	</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span> R.data(data);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;<span class="comment">// class IndexController</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WilfulParam</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String path;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String,String&gt; param;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结:"></a>小结:</h3><p>麻烦的几个点是 </p>
<p>​    组合注解的识别 最早是自己实现的 后修改为 使用Spring的AnnotatedElementUtils进行识别</p>
<p>​    方法参数注入 这个真的是特别麻烦 现在的实现 支持注入的参数其实不够多</p>
<p>​    方法参数名的识别也是个大坑  现在先用 Spring的ParameterNameDiscoverer 去识别</p>
<p>还有些路径是不能识别的比如 /xxx/{id}/{xxxid} 这样的路径参数 的 @RequestMapper</p>
<p>暂时没有这样的接口需要合并就先不实现了</p>
<p>花点时间 基本上 所有的接口都可以被反射合并调用</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
        <tag>Web</tag>
        <tag>Ajax</tag>
        <tag>VUE</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql Using join buffer (Block Nested Loop) join</title>
    <url>/2021/04/16/2021-04-16%20%20Mysql%20Using%20join%20buffer%20(Block%20Nested%20Loop)%20join/</url>
    <content><![CDATA[<span id="more"></span>


<h3 id="Mysql-Using-join-buffer-Block-Nested-Loop"><a href="#Mysql-Using-join-buffer-Block-Nested-Loop" class="headerlink" title="Mysql Using join buffer (Block Nested Loop)"></a>Mysql Using join buffer (Block Nested Loop)</h3><p>EXPLAIN  中的 extra 字段 有数据是 Using where; Using join buffer (Block Nested Loop)</p>
<p>1.未建立索引</p>
<p>2.数据类型不一致</p>
<p> 都是 verchar 但是 编码不一致也会导致此问题</p>
<p> 比如一个表的字段是 utf8 编码 另一个是 utf8mb4 编码</p>
]]></content>
      <categories>
        <category>SQL</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
        <tag>EXPLAIN</tag>
      </tags>
  </entry>
  <entry>
    <title>分组最大N</title>
    <url>/2021/04/16/2021-04-16%20%20%E5%88%86%E7%BB%84%E6%9C%80%E5%A4%A7N/</url>
    <content><![CDATA[<span id="more"></span>


<h3 id="分组最大N"><a href="#分组最大N" class="headerlink" title="分组最大N"></a>分组最大N</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="built_in">MAX</span>(item_id) <span class="keyword">AS</span> item_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	mall_item mi</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	mi.item_barcode,</span><br><span class="line">	mi.item_store</span><br></pre></td></tr></table></figure>

<p>优化为 join</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	i1.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	mall_item i1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> mall_item i2 <span class="keyword">ON</span> (</span><br><span class="line">	i1.item_barcode <span class="operator">=</span> i2.item_barcode</span><br><span class="line">	<span class="keyword">AND</span> i1.item_store <span class="operator">=</span> i2.item_store</span><br><span class="line">	<span class="keyword">AND</span> i1.item_id <span class="operator">&lt;</span> i2.item_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	i2.item_barcode <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>



<p>起因 数据库监控看到一条慢SQL 耗时1秒多</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    mi.item_id,</span><br><span class="line">    mi.item_barcode,</span><br><span class="line">    mi.item_pics,</span><br><span class="line">    mi.item_name,</span><br><span class="line">    mi.item_store,</span><br><span class="line">    mi.item_unit,</span><br><span class="line">    mi.item_specification,</span><br><span class="line">    sc.item_sell_price,sc.item_original_price,sc.specs_remark,</span><br><span class="line">    sc.item_barcode,sc.source <span class="keyword">as</span> itemType,</span><br><span class="line">    IF(scuh.use_type<span class="operator">=</span><span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>) use_type,</span><br><span class="line">    scuh.purchase_num <span class="keyword">AS</span> quantity,</span><br><span class="line">    scuh.card_id</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line"></span><br><span class="line">    (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">MAX</span>(item_id) <span class="keyword">AS</span> item_id</span><br><span class="line">    <span class="keyword">FROM</span> mall_item mi</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> mi.item_barcode, mi.item_store</span><br><span class="line">    ) tmp</span><br><span class="line">    <span class="keyword">JOIN</span> mall_item mi <span class="keyword">ON</span> tmp.item_id <span class="operator">=</span> mi.item_id</span><br><span class="line">    <span class="keyword">join</span> shop_card sc <span class="keyword">on</span> mi.item_store<span class="operator">=</span>sc.mall_id <span class="keyword">AND</span> mi.item_barcode<span class="operator">=</span>sc.item_barcode</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shop_card_use_history scuh <span class="keyword">ON</span> scuh.purchase_num<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">and</span> scuh.use_type <span class="operator">!=</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">and</span> sc.card_id <span class="operator">=</span> scuh.card_id</span><br><span class="line">    <span class="keyword">where</span> scuh.shop_receipt_id <span class="operator">=</span> <span class="string">&#x27;ps_1382892968715325440&#x27;</span></span><br></pre></td></tr></table></figure>

<p>优化后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  i1.item_id,</span><br><span class="line">  i1.item_barcode,</span><br><span class="line">  i1.item_pics,</span><br><span class="line">  i1.item_name,</span><br><span class="line">  i1.item_store,</span><br><span class="line">  i1.item_unit,</span><br><span class="line">  i1.item_specification,</span><br><span class="line">  sc.item_sell_price,</span><br><span class="line">  sc.item_original_price,</span><br><span class="line">  sc.specs_remark,</span><br><span class="line">  sc.item_barcode,</span><br><span class="line">  sc.source <span class="keyword">AS</span> itemType,</span><br><span class="line"></span><br><span class="line">IF (scuh.use_type <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>) use_type,</span><br><span class="line"> scuh.purchase_num <span class="keyword">AS</span> quantity,</span><br><span class="line"> scuh.card_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  mall_item i1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> mall_item i2 <span class="keyword">ON</span> (</span><br><span class="line">  i1.item_barcode <span class="operator">=</span> i2.item_barcode</span><br><span class="line">  <span class="keyword">AND</span> i1.item_store <span class="operator">=</span> i2.item_store</span><br><span class="line">  <span class="keyword">AND</span> i1.item_id <span class="operator">&lt;</span> i2.item_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">JOIN</span> shop_card sc <span class="keyword">ON</span> i1.item_store <span class="operator">=</span> sc.mall_id</span><br><span class="line"><span class="keyword">AND</span> i1.item_barcode <span class="operator">=</span> sc.item_barcode</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shop_card_use_history scuh <span class="keyword">ON</span> scuh.purchase_num <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> scuh.use_type <span class="operator">!=</span> <span class="string">&#x27;j&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> sc.card_id <span class="operator">=</span> scuh.card_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  scuh.shop_receipt_id <span class="operator">=</span> <span class="string">&#x27;ps_1382892968715325440&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> i2.item_barcode <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>优化完只用几十毫秒</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
        <tag>Group By</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV Java</title>
    <url>/2021/04/15/2021-04-15%20OpenCV%20Java/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>Maven集成 OpenCV</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacv-platform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入的不要是 OpenPnP OpenCV 而是 <a href="https://github.com/bytedeco">bytedeco</a>/<strong><a href="https://github.com/bytedeco/javacv">javacv</a></strong></p>
<p>javacv 自带了各平台 OpenCV   .dll  .so  .o .dylib  不用再自己安装 OpenCV了</p>
<p><strong>无需加载动态库</strong></p>
<blockquote>
<p>URL url = ClassLoader.getSystemResource(“lib/opencv/opencv_java440.dll”);</p>
<p>System.load(url.getPath())</p>
<p>或者 </p>
<p>System.loadLibrary(Core.NATIVE_LIBRARY_NAME);  <em>//加载动态链接库</em></p>
</blockquote>
<p>使用 bytedeco 有一点要注意</p>
<p>OpenCV 原本的 import 路径为  org.opencv</p>
<p>JavaCV import 路径为 org.bytedeco.opencv</p>
<p>路径不是完全对应的  比如 <strong>Imgcodecs</strong></p>
<p>原API 路径为: org.opencv.imgcodecs.Imgcodecs</p>
<p>bytedeco 路径为: org.bytedeco.opencv.global.opencv_imgcodecs</p>
<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>网上随便找了个示例 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.opencv.core.*;</span><br><span class="line"><span class="keyword">import</span> org.opencv.highgui.HighGui;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgproc.Imgproc;</span><br><span class="line"><span class="keyword">import</span> org.opencv.objdetect.CascadeClassifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaceOpenCV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// Java 在使用 OpenCV 前必须加载 Core.NATIVE_LIBRARY_NAME 类,否则会报错</span></span><br><span class="line">        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">face</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 读取OpenCV自带的人脸识别特征XML文件</span></span><br><span class="line">        CascadeClassifier faceCV = <span class="keyword">new</span> CascadeClassifier(<span class="string">&quot;G:\\SystemSoft\\opencv\\opencv\\sources\\data\\haarcascades\\haarcascade_frontalface_alt.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 读取测试图片</span></span><br><span class="line">        Mat image = Imgcodecs.imread(<span class="string">&quot;F:\\workTest\\FaceOpenCVData\\1test.png&quot;</span>);</span><br><span class="line">        <span class="comment">//3 特征匹配</span></span><br><span class="line">        MatOfRect face = <span class="keyword">new</span> MatOfRect();</span><br><span class="line">        faceCV.detectMultiScale(image, face);</span><br><span class="line">        <span class="comment">//4 匹配 Rect 矩阵 数组</span></span><br><span class="line">        Rect[] rects = face.toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配到&quot;</span> + rects.length + <span class="string">&quot;个人脸&quot;</span>);</span><br><span class="line">        <span class="comment">// 5 为每张识别到的人脸画一个圈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rects.length; i++) &#123;</span><br><span class="line">            Imgproc.rectangle(image, <span class="keyword">new</span> Point(rects[i].x, rects[i].y), <span class="keyword">new</span> Point(rects[i].x + rects[i].width, rects[i].y + rects[i].height), <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">            Imgproc.putText(image, <span class="string">&quot;FACE&quot;</span>, <span class="keyword">new</span> Point(rects[i].x, rects[i].y), Imgproc.FONT_HERSHEY_SCRIPT_SIMPLEX, <span class="number">1.0</span>, <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>, Imgproc.LINE_AA, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6 展示图片</span></span><br><span class="line">        HighGui.imshow(<span class="string">&quot;人脸识别&quot;</span>, image);</span><br><span class="line">        HighGui.waitKey(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        face();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>用 javacv 修改一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.global.opencv_imgcodecs;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.global.opencv_imgproc;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.opencv_core.Mat;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.opencv_core.Point;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.opencv_core.Rect;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.opencv_core.RectVector;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.opencv_core.Scalar;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.opencv_objdetect.CascadeClassifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 1 读取OpenCV自带的人脸识别特征XML文件</span></span><br><span class="line">		<span class="comment">// OpenCV 图像识别库一般位于 opencv\sources\data 下面</span></span><br><span class="line">		CascadeClassifier facebook = <span class="keyword">new</span> CascadeClassifier(<span class="string">&quot;\\data\\haarcascades\\haarcascade_frontalface_alt.xml&quot;</span>);</span><br><span class="line">		<span class="comment">// 2 读取测试图片</span></span><br><span class="line">		Mat image = opencv_imgcodecs.imread(<span class="string">&quot;\\1.jpg&quot;</span>);</span><br><span class="line">		<span class="comment">// 3 特征匹配</span></span><br><span class="line">		RectVector face = <span class="keyword">new</span> RectVector();</span><br><span class="line">		facebook.detectMultiScale(image, face);</span><br><span class="line">		<span class="comment">// 4 匹配 Rect 矩阵 数组</span></span><br><span class="line">		Rect[] rects = face.get();</span><br><span class="line">		System.out.println(<span class="string">&quot;匹配到 &quot;</span> + rects.length + <span class="string">&quot; 个人脸&quot;</span>);</span><br><span class="line">		<span class="comment">// 5 为每张识别到的人脸画一个圈</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rects.length; i++) &#123;</span><br><span class="line">			opencv_imgproc.rectangle(image, <span class="keyword">new</span> Point(rects[i].x(), rects[i].y()),</span><br><span class="line">					<span class="keyword">new</span> Point(rects[i].x() + rects[i].width(), rects[i].y() + rects[i].height()),</span><br><span class="line">					<span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">			opencv_imgproc.putText(image, <span class="string">&quot;Human&quot;</span>, <span class="keyword">new</span> Point(rects[i].x(), rects[i].y()),</span><br><span class="line">					opencv_imgproc.FONT_HERSHEY_SCRIPT_SIMPLEX, <span class="number">1.0</span>, <span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>,</span><br><span class="line">					opencv_imgproc.LINE_AA, <span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 6 展示图片</span></span><br><span class="line">		<span class="comment">// HighGui.imshow(&quot;人脸识别&quot;, image);</span></span><br><span class="line">		opencv_imgcodecs.imwrite(<span class="string">&quot;\\2.jpg&quot;</span>, image);</span><br><span class="line">		<span class="comment">// HighGui.waitKey(0);</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud 整合 Dubbo</title>
    <url>/2021/04/23/2021-04-23%20%20SpringCloud%20%E6%95%B4%E5%90%88%20Dubbo/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="选择整合方式"><a href="#选择整合方式" class="headerlink" title="选择整合方式"></a>选择整合方式</h1><p>1 用 dubbo 替换 feign 的 http 请求方式</p>
<p>2 正常的接口远程调用方式</p>
<h2 id="0-共通基础"><a href="#0-共通基础" class="headerlink" title="0 共通基础"></a>0 共通基础</h2><p>不管用什么方式使用dubbo 都得引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-用-dubbo-替代-feign"><a href="#1-用-dubbo-替代-feign" class="headerlink" title="1 用 dubbo 替代 feign"></a>1 用 dubbo 替代 feign</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Feign;</span><br><span class="line"><span class="keyword">import</span> feign.Target;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.alibaba.spring.util.AnnotationUtils.getAttributes;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.core.annotation.AnnotationAttributes.fromMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dubbo、Feign整合类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboFeignBuilder</span> <span class="keyword">extends</span> <span class="title">Feign</span>.<span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DubboReference defaultReference;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultReferenceClass</span> </span>&#123;</span><br><span class="line">        <span class="meta">@DubboReference(check = false)</span></span><br><span class="line">        String field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboFeignBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultReference = Objects.requireNonNull(ReflectionUtils.findField(DefaultReferenceClass.class, <span class="string">&quot;field&quot;</span>)).getAnnotation(DubboReference.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">target</span><span class="params">(Target&lt;T&gt; target)</span> </span>&#123;</span><br><span class="line">        ReferenceBeanBuilder beanBuilder = ReferenceBeanBuilder.create(fromMap(getAttributes(defaultReference,</span><br><span class="line">                applicationContext.getEnvironment(), <span class="keyword">true</span>)), applicationContext).interfaceClass(target.type());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T object = (T) beanBuilder.build().getObject();</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.utils.ArrayUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.MethodConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Method;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.ServiceBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.annotation.DubboClassPathBeanDefinitionScanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.MutablePropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanClassLoaderAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EnvironmentAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ResourceLoaderAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationBeanNameGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.AnnotationTypeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.alibaba.spring.util.AnnotationUtils.getAttribute;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.alibaba.spring.util.BeanRegistrar.registerInfrastructureBean;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.alibaba.spring.util.ObjectUtils.of;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Arrays.asList;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder.create;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.context.annotation.AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.core.annotation.AnnotationUtils.getAnnotationAttributes;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.util.ClassUtils.getAllInterfacesForClass;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.util.ClassUtils.resolveClassName;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.util.StringUtils.hasText;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboFeignProviderBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>, <span class="title">EnvironmentAware</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ResourceLoaderAware</span>, <span class="title">BeanClassLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;Class&lt;? extends Annotation&gt;&gt; serviceAnnotationTypes = asList(</span><br><span class="line">            <span class="comment">// @since 2.7.7 Add the @DubboService , the issue : https://github.com/apache/dubbo/issues/6007</span></span><br><span class="line">            DubboService.class,</span><br><span class="line">            <span class="comment">// @since 2.7.0 the substitute @com.alibaba.dubbo.config.annotation.Service</span></span><br><span class="line">            Service.class,</span><br><span class="line">            <span class="comment">// @since 2.7.3 Add the compatibility for legacy Dubbo&#x27;s @Service , the issue : https://github.com/apache/dubbo/issues/4330</span></span><br><span class="line">            com.alibaba.dubbo.config.annotation.Service.class</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; packagesToScan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DubboService defaultService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboFeignProviderBeanPostProcessor</span><span class="params">(String... packagesToScan)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Arrays.asList(packagesToScan));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboFeignProviderBeanPostProcessor</span><span class="params">(Collection&lt;String&gt; packagesToScan)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> LinkedHashSet&lt;String&gt;(packagesToScan));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboFeignProviderBeanPostProcessor</span><span class="params">(Set&lt;String&gt; packagesToScan)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.packagesToScan = packagesToScan;</span><br><span class="line">        <span class="meta">@DubboService</span></span><br><span class="line">        <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultServiceClass</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        ;</span><br><span class="line">        <span class="keyword">this</span>.defaultService = DefaultServiceClass.class.getAnnotation(DubboService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @since 2.7.5</span></span><br><span class="line">        registerInfrastructureBean(registry, DubboBootstrapApplicationListener.BEAN_NAME, DubboBootstrapApplicationListener.class);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; resolvedPackagesToScan = resolvePackagesToScan(packagesToScan);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(resolvedPackagesToScan)) &#123;</span><br><span class="line">            registerServiceBeans(resolvedPackagesToScan, registry);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;packagesToScan is empty , ServiceBean registry will be ignored!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Registers Beans whose classes was annotated &#123;<span class="doctag">@link</span> FeignClient&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packagesToScan The base packages to scan</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry       &#123;<span class="doctag">@link</span> BeanDefinitionRegistry&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerServiceBeans</span><span class="params">(Set&lt;String&gt; packagesToScan, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DubboClassPathBeanDefinitionScanner scanner =</span><br><span class="line">                <span class="keyword">new</span> DubboClassPathBeanDefinitionScanner(registry, environment, resourceLoader);</span><br><span class="line"></span><br><span class="line">        BeanNameGenerator beanNameGenerator = resolveBeanNameGenerator(registry);</span><br><span class="line"></span><br><span class="line">        scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// refactor @since 2.7.7</span></span><br><span class="line">        serviceAnnotationTypes.forEach(annotationType -&gt; &#123;</span><br><span class="line">            scanner.addIncludeFilter(<span class="keyword">new</span> AnnotationTypeFilter(annotationType));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String packageToScan : packagesToScan) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Registers @DubboService Bean first</span></span><br><span class="line">            scanner.scan(packageToScan);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Finds all BeanDefinitionHolders of @DubboService whether @ComponentScan scans or not.</span></span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; beanDefinitionHolders =</span><br><span class="line">                    findServiceBeanDefinitionHolders(scanner, packageToScan, registry, beanNameGenerator);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(beanDefinitionHolders)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (BeanDefinitionHolder beanDefinitionHolder : beanDefinitionHolders) &#123;</span><br><span class="line">                    registerServiceBean(beanDefinitionHolder, registry, scanner);</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(beanDefinitionHolders.size() + <span class="string">&quot; annotated Dubbo&#x27;s @DubboService Components &#123; &quot;</span> +</span><br><span class="line">                        beanDefinitionHolders +</span><br><span class="line">                        <span class="string">&quot; &#125; were scanned under package[&quot;</span> + packageToScan + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;No Spring Bean annotating Dubbo&#x27;s @DubboService was found under package[&quot;</span></span><br><span class="line">                        + packageToScan + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * It&#x27;d better to use BeanNameGenerator instance that should reference</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> ConfigurationClassPostProcessor&#125;,</span></span><br><span class="line"><span class="comment">     * thus it maybe a potential problem on bean name generation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry &#123;<span class="doctag">@link</span> BeanDefinitionRegistry&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> BeanNameGenerator&#125; instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> SingletonBeanRegistry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AnnotationConfigUtils#CONFIGURATION_BEAN_NAME_GENERATOR</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ConfigurationClassPostProcessor#processConfigBeanDefinitions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2.5.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BeanNameGenerator <span class="title">resolveBeanNameGenerator</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BeanNameGenerator beanNameGenerator = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (registry <span class="keyword">instanceof</span> SingletonBeanRegistry) &#123;</span><br><span class="line">            SingletonBeanRegistry singletonBeanRegistry = SingletonBeanRegistry.class.cast(registry);</span><br><span class="line">            beanNameGenerator = (BeanNameGenerator) singletonBeanRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (beanNameGenerator == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;BeanNameGenerator bean can&#x27;t be found in BeanFactory with name [&quot;</span></span><br><span class="line">                    + CONFIGURATION_BEAN_NAME_GENERATOR + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;BeanNameGenerator will be a instance of &quot;</span> +</span><br><span class="line">                    AnnotationBeanNameGenerator.class.getName() +</span><br><span class="line">                    <span class="string">&quot; , it maybe a potential problem on bean name generation.&quot;</span>);</span><br><span class="line">            beanNameGenerator = <span class="keyword">new</span> AnnotationBeanNameGenerator();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanNameGenerator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Finds a &#123;<span class="doctag">@link</span> Set&#125; of &#123;<span class="doctag">@link</span> BeanDefinitionHolder BeanDefinitionHolders&#125; whose bean type annotated</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> DubboService&#125; Annotation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scanner       &#123;<span class="doctag">@link</span> ClassPathBeanDefinitionScanner&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageToScan pachage to scan</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry      &#123;<span class="doctag">@link</span> BeanDefinitionRegistry&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> non-null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2.5.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">findServiceBeanDefinitionHolders</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ClassPathBeanDefinitionScanner scanner, String packageToScan, BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">            BeanNameGenerator beanNameGenerator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Set&lt;BeanDefinition&gt; beanDefinitions = scanner.findCandidateComponents(packageToScan);</span><br><span class="line"></span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; beanDefinitionHolders = <span class="keyword">new</span> LinkedHashSet&lt;BeanDefinitionHolder&gt;(beanDefinitions.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitions) &#123;</span><br><span class="line"></span><br><span class="line">            String beanName = beanNameGenerator.generateBeanName(beanDefinition, registry);</span><br><span class="line">            BeanDefinitionHolder beanDefinitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName);</span><br><span class="line">            beanDefinitionHolders.add(beanDefinitionHolder);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionHolders;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Registers &#123;<span class="doctag">@link</span> ServiceBean&#125; from new annotated &#123;<span class="doctag">@link</span> DubboService&#125; &#123;<span class="doctag">@link</span> BeanDefinition&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanDefinitionHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scanner</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServiceBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> BeanDefinition</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerServiceBean</span><span class="params">(BeanDefinitionHolder beanDefinitionHolder, BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     DubboClassPathBeanDefinitionScanner scanner)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; beanClass = resolveClass(beanDefinitionHolder);</span><br><span class="line"></span><br><span class="line">        Annotation service = findServiceAnnotation(beanClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; of <span class="doctag">@Service</span> annotation</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        AnnotationAttributes serviceAnnotationAttributes = getAnnotationAttributes(service, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; interfaceClass = resolveServiceInterfaceClass(serviceAnnotationAttributes, beanClass);</span><br><span class="line"></span><br><span class="line">        String annotatedServiceBeanName = beanDefinitionHolder.getBeanName();</span><br><span class="line"></span><br><span class="line">        AbstractBeanDefinition serviceBeanDefinition =</span><br><span class="line">                buildServiceBeanDefinition(service, serviceAnnotationAttributes, interfaceClass, annotatedServiceBeanName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ServiceBean Bean name</span></span><br><span class="line">        String beanName = generateServiceBeanName(serviceAnnotationAttributes, interfaceClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.checkCandidate(beanName, serviceBeanDefinition)) &#123; <span class="comment">// check duplicated candidate bean</span></span><br><span class="line">            registry.registerBeanDefinition(beanName, serviceBeanDefinition);</span><br><span class="line">            log.warn(<span class="string">&quot;The BeanDefinition[&quot;</span> + serviceBeanDefinition +</span><br><span class="line">                    <span class="string">&quot;] of ServiceBean has been registered with name : &quot;</span> + beanName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;The Duplicated BeanDefinition[&quot;</span> + serviceBeanDefinition +</span><br><span class="line">                    <span class="string">&quot;] of ServiceBean[ bean name : &quot;</span> + beanName +</span><br><span class="line">                    <span class="string">&quot;] was be found , Did @DubboComponentScan scan to same package in many times?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Generates the bean name of &#123;<span class="doctag">@link</span> ServiceBean&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceAnnotationAttributes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaceClass              the class of interface annotated &#123;<span class="doctag">@link</span> Service&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ServiceBean@interfaceClassName#annotatedServiceBeanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2.7.3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">generateServiceBeanName</span><span class="params">(AnnotationAttributes serviceAnnotationAttributes, Class&lt;?&gt; interfaceClass)</span> </span>&#123;</span><br><span class="line">        ServiceBeanNameBuilder builder = create(interfaceClass, environment)</span><br><span class="line">                .group(serviceAnnotationAttributes.getString(<span class="string">&quot;group&quot;</span>))</span><br><span class="line">                .version(serviceAnnotationAttributes.getString(<span class="string">&quot;version&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; resolveServiceInterfaceClass(AnnotationAttributes attributes, Class&lt;?&gt; defaultInterfaceClass)</span><br><span class="line">            <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = defaultInterfaceClass != <span class="keyword">null</span> ? defaultInterfaceClass.getClassLoader() : Thread.currentThread().getContextClassLoader();</span><br><span class="line">        Class&lt;?&gt; interfaceClass = getAttribute(attributes, <span class="string">&quot;interfaceClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">void</span>.class.equals(interfaceClass)) &#123;</span><br><span class="line"></span><br><span class="line">            interfaceClass = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            String interfaceClassName = getAttribute(attributes, <span class="string">&quot;interfaceName&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hasText(interfaceClassName)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ClassUtils.isPresent(interfaceClassName, classLoader)) &#123;</span><br><span class="line">                    interfaceClass = resolveClassName(interfaceClassName, classLoader);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (interfaceClass == <span class="keyword">null</span> &amp;&amp; defaultInterfaceClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Find all interfaces from the annotated class</span></span><br><span class="line">            <span class="comment">// To resolve an issue : https://github.com/apache/dubbo/issues/3251</span></span><br><span class="line">            Class&lt;?&gt;[] allInterfaces = getAllInterfacesForClass(defaultInterfaceClass);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (allInterfaces.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                interfaceClass = allInterfaces[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        Assert.notNull(interfaceClass,</span><br><span class="line">                <span class="string">&quot;@Service interfaceClass() or interfaceName() or interface class must be present!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Assert.isTrue(interfaceClass.isInterface(),</span><br><span class="line">                <span class="string">&quot;The annotated type must be an interface!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> interfaceClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; resolveClass(BeanDefinitionHolder beanDefinitionHolder) &#123;</span><br><span class="line"></span><br><span class="line">        BeanDefinition beanDefinition = beanDefinitionHolder.getBeanDefinition();</span><br><span class="line">        <span class="keyword">return</span> resolveClass(beanDefinition);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; resolveClass(BeanDefinition beanDefinition) &#123;</span><br><span class="line"></span><br><span class="line">        String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">        <span class="keyword">return</span> resolveClassName(beanClassName, classLoader);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Find the &#123;<span class="doctag">@link</span> Annotation annotation&#125; of <span class="doctag">@Service</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanClass the &#123;<span class="doctag">@link</span> Class class&#125; of Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;code&gt;null&lt;/code&gt; if not found</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2.7.3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Annotation <span class="title">findServiceAnnotation</span><span class="params">(Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serviceAnnotationTypes</span><br><span class="line">                .stream()</span><br><span class="line">                .map(annotationType -&gt; findMergedAnnotation(beanClass, annotationType))</span><br><span class="line">                .filter(Objects::nonNull)</span><br><span class="line">                .findFirst()</span><br><span class="line">                .orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">resolvePackagesToScan</span><span class="params">(Set&lt;String&gt; packagesToScan)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; resolvedPackagesToScan = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(packagesToScan.size());</span><br><span class="line">        <span class="keyword">for</span> (String packageToScan : packagesToScan) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(packageToScan)) &#123;</span><br><span class="line">                String resolvedPackageToScan = environment.resolvePlaceholders(packageToScan.trim());</span><br><span class="line">                resolvedPackagesToScan.add(resolvedPackageToScan);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resolvedPackagesToScan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build the &#123;<span class="doctag">@link</span> AbstractBeanDefinition Bean Definition&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceAnnotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceAnnotationAttributes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaceClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotatedServiceBeanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2.7.3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AbstractBeanDefinition <span class="title">buildServiceBeanDefinition</span><span class="params">(Annotation serviceAnnotation,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                              AnnotationAttributes serviceAnnotationAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                              Class&lt;?&gt; interfaceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                              String annotatedServiceBeanName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BeanDefinitionBuilder builder = rootBeanDefinition(ServiceBean.class);</span><br><span class="line"></span><br><span class="line">        AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">        MutablePropertyValues propertyValues = beanDefinition.getPropertyValues();</span><br><span class="line"></span><br><span class="line">        String[] ignoreAttributeNames = of(<span class="string">&quot;provider&quot;</span>, <span class="string">&quot;monitor&quot;</span>, <span class="string">&quot;application&quot;</span>, <span class="string">&quot;module&quot;</span>, <span class="string">&quot;registry&quot;</span>, <span class="string">&quot;protocol&quot;</span>,</span><br><span class="line">                <span class="string">&quot;interface&quot;</span>, <span class="string">&quot;interfaceName&quot;</span>, <span class="string">&quot;parameters&quot;</span>);</span><br><span class="line"></span><br><span class="line">        propertyValues.addPropertyValues(<span class="keyword">new</span> AnnotationPropertyValuesAdapter(serviceAnnotation, environment, ignoreAttributeNames));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// References &quot;ref&quot; property to annotated-@Service Bean</span></span><br><span class="line">        addPropertyReference(builder, <span class="string">&quot;ref&quot;</span>, annotatedServiceBeanName);</span><br><span class="line">        <span class="comment">// Set interface</span></span><br><span class="line">        builder.addPropertyValue(<span class="string">&quot;interface&quot;</span>, interfaceClass.getName());</span><br><span class="line">        <span class="comment">// Convert parameters into map</span></span><br><span class="line">        builder.addPropertyValue(<span class="string">&quot;parameters&quot;</span>, convertParameters(serviceAnnotationAttributes.getStringArray(<span class="string">&quot;parameters&quot;</span>)));</span><br><span class="line">        <span class="comment">// Add methods parameters</span></span><br><span class="line">        List&lt;MethodConfig&gt; methodConfigs = convertMethodConfigs(serviceAnnotationAttributes.get(<span class="string">&quot;methods&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (!methodConfigs.isEmpty()) &#123;</span><br><span class="line">            builder.addPropertyValue(<span class="string">&quot;methods&quot;</span>, methodConfigs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Add &#123;<span class="doctag">@link</span> org.apache.dubbo.config.ProviderConfig&#125; Bean reference</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String providerConfigBeanName = serviceAnnotationAttributes.getString(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(providerConfigBeanName)) &#123;</span><br><span class="line">            addPropertyReference(builder, <span class="string">&quot;provider&quot;</span>, providerConfigBeanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Add &#123;<span class="doctag">@link</span> org.apache.dubbo.config.MonitorConfig&#125; Bean reference</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String monitorConfigBeanName = serviceAnnotationAttributes.getString(<span class="string">&quot;monitor&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(monitorConfigBeanName)) &#123;</span><br><span class="line">            addPropertyReference(builder, <span class="string">&quot;monitor&quot;</span>, monitorConfigBeanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Add &#123;<span class="doctag">@link</span> org.apache.dubbo.config.ApplicationConfig&#125; Bean reference</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String applicationConfigBeanName = serviceAnnotationAttributes.getString(<span class="string">&quot;application&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(applicationConfigBeanName)) &#123;</span><br><span class="line">            addPropertyReference(builder, <span class="string">&quot;application&quot;</span>, applicationConfigBeanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Add &#123;<span class="doctag">@link</span> org.apache.dubbo.config.ModuleConfig&#125; Bean reference</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String moduleConfigBeanName = serviceAnnotationAttributes.getString(<span class="string">&quot;module&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(moduleConfigBeanName)) &#123;</span><br><span class="line">            addPropertyReference(builder, <span class="string">&quot;module&quot;</span>, moduleConfigBeanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Add &#123;<span class="doctag">@link</span> org.apache.dubbo.config.RegistryConfig&#125; Bean reference</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String[] registryConfigBeanNames = serviceAnnotationAttributes.getStringArray(<span class="string">&quot;registry&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;RuntimeBeanReference&gt; registryRuntimeBeanReferences = toRuntimeBeanReferences(registryConfigBeanNames);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!registryRuntimeBeanReferences.isEmpty()) &#123;</span><br><span class="line">            builder.addPropertyValue(<span class="string">&quot;registries&quot;</span>, registryRuntimeBeanReferences);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Add &#123;<span class="doctag">@link</span> org.apache.dubbo.config.ProtocolConfig&#125; Bean reference</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String[] protocolConfigBeanNames = serviceAnnotationAttributes.getStringArray(<span class="string">&quot;protocol&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;RuntimeBeanReference&gt; protocolRuntimeBeanReferences = toRuntimeBeanReferences(protocolConfigBeanNames);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!protocolRuntimeBeanReferences.isEmpty()) &#123;</span><br><span class="line">            builder.addPropertyValue(<span class="string">&quot;protocols&quot;</span>, protocolRuntimeBeanReferences);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ManagedList&lt;RuntimeBeanReference&gt; <span class="title">toRuntimeBeanReferences</span><span class="params">(String... beanNames)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ManagedList&lt;RuntimeBeanReference&gt; runtimeBeanReferences = <span class="keyword">new</span> ManagedList&lt;RuntimeBeanReference&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(beanNames)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line"></span><br><span class="line">                String resolvedBeanName = environment.resolvePlaceholders(beanName);</span><br><span class="line"></span><br><span class="line">                runtimeBeanReferences.add(<span class="keyword">new</span> RuntimeBeanReference(resolvedBeanName));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> runtimeBeanReferences;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addPropertyReference</span><span class="params">(BeanDefinitionBuilder builder, String propertyName, String beanName)</span> </span>&#123;</span><br><span class="line">        String resolvedBeanName = environment.resolvePlaceholders(beanName);</span><br><span class="line">        builder.addPropertyReference(propertyName, resolvedBeanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classLoader = classLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List <span class="title">convertMethodConfigs</span><span class="params">(Object methodsAnnotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (methodsAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.EMPTY_LIST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MethodConfig.constructMethodConfig((Method[]) methodsAnnotation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">convertParameters</span><span class="params">(String[] parameters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtils.isEmpty(parameters)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parameters.length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;parameter attribute must be paired with key followed by value&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            map.put(parameters[i], parameters[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Feign;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.AbstractConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.beans.factory.annotation.DubboFeignBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.beans.factory.annotation.DubboFeignProviderBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.source.ConfigurationPropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Collections.emptySet;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.dubbo.spring.boot.util.DubboUtils.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dubbo配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = DUBBO_PREFIX, name = &quot;enabled&quot;, matchIfMissing = true, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(AbstractConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboFeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = DUBBO_SCAN_PREFIX, name = BASE_PACKAGES_PROPERTY_NAME)</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(ConfigurationPropertySources.class)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DubboFeignProviderBeanPostProcessor <span class="title">dubboFeignProviderBeanPostProcessor</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; packagesToScan = environment.getProperty(DUBBO_SCAN_PREFIX + BASE_PACKAGES_PROPERTY_NAME, Set.class, emptySet());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboFeignProviderBeanPostProcessor(packagesToScan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignDubboBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DubboFeignBuilder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这种方式我目前没有实践过 代码参考 <a href="https://github.com/matevip/matecloud">https://github.com/matevip/matecloud</a> 的 mate-starter-dubbo 模块</p>
<h2 id="2-dubbo-单独使用"><a href="#2-dubbo-单独使用" class="headerlink" title="2 dubbo 单独使用"></a>2 dubbo 单独使用<span id="2"></span></h2><p>首先 代码前提是 SpringCloud Nacos</p>
<h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="comment">#加上之后标识不订阅任何服务 默认是 *  provider什么都不订阅</span></span><br><span class="line">      <span class="comment">#不加这个 provider启动时会生成很多日志 会把Nacos上所有的服务都查找一遍</span></span><br><span class="line">      <span class="attr">subscribed-services:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">protocol:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">        <span class="comment">#-1是自增长</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">registry:</span></span><br><span class="line">        <span class="attr">address:</span> <span class="string">nacos://$&#123;spring.cloud.nacos.config.server-addr&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#address: spring-cloud://127.0.0.1  </span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><code>dubbo.scan.base-packages</code>：指定 Dubbo 服务实现类的扫描基准包</li>
<li><code>dubbo.protocol</code>：Dubbo服务暴露的协议配置，其中子属性name为协议名称，port为协议端口（-1 表示自增端口，从 20880 开始）</li>
<li><code>dubbo.registry</code>：Dubbo 服务注册中心配置，其中子属性address 的值 “spring-cloud://192.168.44.129”，说明挂载到 Spring Cloud 注册中心</li>
<li><code>spring.application.name</code>：Spring 应用名称，用于 Spring Cloud 服务注册和发现。该值在 Dubbo Spring Cloud 加持下被视作<code>dubbo.application.name</code>，因此，无需再显示地配置<code>dubbo.application.name</code>。</li>
<li><code>spring.main.allow-bean-definition-overriding</code>：在 Spring Boot 2.1 以及更高的版本增加该设定，因为 Spring Boot 默认调整了 Bean 定义覆盖行为。</li>
<li><code>spring.cloud.nacos.discovery</code>：Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口。</li>
</ul>
</blockquote>
<p><code>dubbo.scan.base-packages</code> 这个可以用 @DubboComponentScan 替代</p>
<p>配置文件我都放到 nacos 中公用了 这里就用 注解来扫描吧 毕竟每个 provider 扫描的包可能不一样</p>
<p>先定义一个基础 api 包</p>
<p>添加上接口</p>
<p> 在 provider 中实现该接口 并添加 @DubboService 注解</p>
<h3 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">    <span class="attr">protocol:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">registry:</span></span><br><span class="line">        <span class="attr">address:</span> <span class="string">nacos://$&#123;spring.cloud.nacos.config.server-addr&#125;</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">subscribed-services:</span> <span class="string">provider</span>  <span class="comment">#要订阅的服务  默认是 * </span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>   <span class="comment">#registry address 引用这个</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">database-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure>



<p>需要调用 provider 的地方使用</p>
<p>@DubboReference 注解需要调用的接口即可</p>
<p>具体可以参考</p>
<p><a href="https://github.com/nemowang/springcloud-dubbo-nacos-example">https://github.com/nemowang/springcloud-dubbo-nacos-example</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="consumer-先启动不报错配置"><a href="#consumer-先启动不报错配置" class="headerlink" title="consumer 先启动不报错配置"></a>consumer 先启动不报错配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者配置不主动监督服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumerConfig <span class="title">consumerConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ConsumerConfig consumerConfig = <span class="keyword">new</span> ConsumerConfig();</span><br><span class="line">       consumerConfig.setCheck(<span class="keyword">false</span>);</span><br><span class="line">       consumerConfig.setTimeout(<span class="number">5000</span>);</span><br><span class="line">       <span class="keyword">return</span> consumerConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h4><p>消费者 访问 供应者 前把追踪码携带到请求中</p>
<p>MDC 在 “2021-03-31分布式 日志追踪 链路追踪.md” 中有提到过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Activate(group = CommonConstants.CONSUMER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumerFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>&#123;</span><br><span class="line">		RpcContext context = RpcContext.getContext();</span><br><span class="line">        String trace = MDC.get(<span class="string">&quot;logTrackId&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(trace != <span class="keyword">null</span>) </span><br><span class="line">			context.setAttachment(<span class="string">&quot;logTrackId&quot;</span>, trace);</span><br><span class="line">		Result result =  invoker.invoke(invocation);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>供应者在执行准确方法前把追踪码放入 MDC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Activate(group = CommonConstants.PROVIDER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProviderFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//消费者携带的参数</span></span><br><span class="line">		Map&lt;String, Object&gt; attachments = RpcContext.getContext().getObjectAttachments();</span><br><span class="line">		String trace = attachments.get(<span class="string">&quot;logTrackId&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(trace != <span class="keyword">null</span>) </span><br><span class="line">			MDC.set(<span class="string">&quot;logTrackId&quot;</span>,trace);</span><br><span class="line">		Result result =  invoker.invoke(invocation);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>链路追踪 完~</p>
<h4 id="封装-dubbo-隐式传递"><a href="#封装-dubbo-隐式传递" class="headerlink" title="封装 dubbo 隐式传递"></a>封装 dubbo 隐式传递</h4><p>如果在调用 dubbo时 需要传递或转换的信息较多可以用一下方式处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Activate(group = CommonConstants.CONSUMER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumerFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>&#123;</span><br><span class="line">		RpcContext context = RpcContext.getContext();</span><br><span class="line">		<span class="keyword">for</span> (DubboProcess processor : ProcessUtils.getAllProcessor()) &#123;</span><br><span class="line">			processor.before(context);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Result result =  invoker.invoke(invocation);</span><br><span class="line">			<span class="keyword">for</span>(DubboTransfer transfer : TransferUtils.getAllTransfer()) &#123;</span><br><span class="line">				result = transfer.devanning(result);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">			log.debug(<span class="string">&quot;Dubbo Call [&quot;</span> + context.getMethodName() + <span class="string">&quot;] Elapsed [&quot;</span> + (endTime - startTime) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(group = CommonConstants.PROVIDER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProviderFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; attachments = RpcContext.getContext().getObjectAttachments();</span><br><span class="line">		<span class="keyword">for</span> (DubboProcess processor : ProcessUtils.getAllProcessor()) &#123;</span><br><span class="line">			processor.after(attachments);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		Result result =  invoker.invoke(invocation);</span><br><span class="line">		<span class="keyword">for</span>(DubboTransfer transfer : TransferUtils.getAllTransfer()) &#123;</span><br><span class="line">			result = transfer.encasement(result);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DubboProcess</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> String prefix = <span class="string">&quot;rpc_hide_param_&quot;</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(RpcContext context)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> List&lt;DubboProcess&gt; list = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;DubboProcess&gt; <span class="title">getAllProcessor</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(list == <span class="keyword">null</span>) &#123;</span><br><span class="line">			list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			List&lt;Class&lt;?&gt;&gt; processors = CommClass.getAllClassByInterface(DubboProcess.class, <span class="string">&quot;org.lqs1848.common.dubbo.process.impl&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span>(Class&lt;?&gt; p :  processors) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					list.add((DubboProcess) p.newInstance());</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分页处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageProcess</span> <span class="keyword">implements</span> <span class="title">DubboProcess</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(RpcContext context)</span> </span>&#123;</span><br><span class="line">		Page page = PagePass.getLocalPage();</span><br><span class="line">		<span class="keyword">if</span>(page != <span class="keyword">null</span>) &#123;</span><br><span class="line">			context.setAttachment(prefix + <span class="string">&quot;isStartPage&quot;</span>, page.getOrderBy());</span><br><span class="line">			context.setAttachment(prefix + Constants.PAGE_NUM, page.getPageNum());</span><br><span class="line">			context.setAttachment(prefix + Constants.PAGE_SIZE, page.getPageSize());</span><br><span class="line">			context.setAttachment(prefix + Constants.IS_ASC, page.getOrderBy());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(params.containsKey(prefix + <span class="string">&quot;isStartPage&quot;</span>)) &#123;</span><br><span class="line">			PagePass.tolerancePage(Convert.toInt(params.get(prefix + Constants.PAGE_NUM)), Convert.toInt(params.get(prefix + Constants.PAGE_SIZE)), Convert.toStr(params.get(prefix + Constants.IS_ASC)));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分表标示携带</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SliciTableProcess</span> <span class="keyword">implements</span> <span class="title">DubboProcess</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(RpcContext context)</span> </span>&#123;</span><br><span class="line">		Integer flag = SliciTableUtils.getCurSubFlag();</span><br><span class="line">		<span class="keyword">if</span>(flag != <span class="keyword">null</span>)</span><br><span class="line">			context.setAttachment(prefix + <span class="string">&quot;sliciTableFlag&quot;</span>, flag);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">		SliciTableUtils.clearSubFlag();	</span><br><span class="line">		Integer flag = Convert.toInt(params.get(prefix + <span class="string">&quot;sliciTableFlag&quot;</span>));</span><br><span class="line">		<span class="keyword">if</span>(flag != <span class="keyword">null</span>)</span><br><span class="line">			SliciTableUtils.setCurSubFlag(flag);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//追踪码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceProcess</span> <span class="keyword">implements</span> <span class="title">DubboProcess</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(RpcContext context)</span> </span>&#123;</span><br><span class="line">		String trace = Convert.toStr(TraceUtils.getTrace());</span><br><span class="line">		<span class="keyword">if</span>(trace != <span class="keyword">null</span>) </span><br><span class="line">			context.setAttachment(prefix + <span class="string">&quot;logTrackId&quot;</span>, trace);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">		String trace = Convert.toStr(params.get(prefix + <span class="string">&quot;logTrackId&quot;</span>));</span><br><span class="line">		<span class="keyword">if</span>(trace != <span class="keyword">null</span>) </span><br><span class="line">			TraceUtils.setTrace(trace);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DubboTransfer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">order</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//消费者实现</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">devanning</span><span class="params">(Result result)</span></span>;</span><br><span class="line">    <span class="comment">//提供者实现</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">encasement</span><span class="params">(Result result)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> List&lt;DubboTransfer&gt; list = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;DubboTransfer&gt; <span class="title">getAllTransfer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(list == <span class="keyword">null</span>) &#123;</span><br><span class="line">			list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			List&lt;Class&lt;?&gt;&gt; transfers = CommClass.getAllClassByInterface(DubboTransfer.class, <span class="string">&quot;org.lqs1848.common.dubbo.transfer.impl&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span>(Class&lt;?&gt; p :  transfers) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					list.add((DubboTransfer) p.newInstance());</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			list.sort(<span class="keyword">new</span> Comparator&lt;DubboTransfer&gt;() &#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(DubboTransfer o1, DubboTransfer o2)</span> </span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(o1.order() &gt; o2.order())</span><br><span class="line">						<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span>(o1.order() &lt; o2.order())</span><br><span class="line">						<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PageHelper 分页转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageTransfer</span> <span class="keyword">implements</span> <span class="title">DubboTransfer</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">devanning</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">		Object obj = result.getValue();</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		PageMessage page = (PageMessage) result.getObjectAttachment(<span class="string">&quot;PageMessage&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (page != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//消费者 查看传递的参数中有 Page 的分页信息</span></span><br><span class="line">            <span class="comment">//把传输过程中丢失分页信息的 Page 重新封装成 PageHelper的Page</span></span><br><span class="line">			result.setValue(page.getPageToPageHelper((List) obj));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">encasement</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">		Object obj = result.getValue();</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		<span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Page) &#123;</span><br><span class="line">			<span class="comment">//提供者发现 返回的结果是 PageHelper 插件提供的 Page对象 把Page 转换成可以json传递的对象</span></span><br><span class="line">			result.setAttachment(<span class="string">&quot;PageMessage&quot;</span>, <span class="keyword">new</span> PageMessage((Page)obj));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>process 用来传递参数 比如携带追踪码 分表标示信息 还有分页信息 等</p>
<p>​    MyBatis 的 PageHelper 插件的 Page 就是个 List 在传递过程中 被转换为 JSON 会丢失分页信息 所以 Page 需要单独处理</p>
<p>transfer 用来处理 result</p>
<p>这样封装后 有使用 dubbo的就集成这个jar包 provider和consumer都同时集成</p>
<p><strong>注意:</strong></p>
<p><strong>要让dubbo的过滤器生效必须配置</strong></p>
<p>​    <strong>META-INF 下添加 dubbo/internal/org.apache.dubbo.rpc.Filter 文件</strong></p>
<p><strong>文件内容为:</strong></p>
<p><strong>providerFilter=org.lqs1848.common.dubbo.filter.DubboProviderFilter</strong><br><strong>consumerFilter=org.lqs1848.common.dubbo.filter.DubboConsumerFilter</strong></p>
<p><strong>指明 Filter 的路径</strong></p>
<p>反正过滤器不生效 百度下 org.apache.dubbo.rpc.Filter 或者 dubbo SPI</p>
<h4 id="异常传递"><a href="#异常传递" class="headerlink" title="异常传递"></a>异常传递</h4><p>Dubbo默认会把 项目的自定义异常 转换为 RuntimeException 给 consumer</p>
<p>会导致 consumer 全局异常拦截不生效</p>
<p>首先看一下 dubbo 自己的默认实现</p>
<p>org.apache.dubbo.rpc.filter.ExceptionFilter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Activate(group = CommonConstants.PROVIDER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span>, <span class="title">Filter</span>.<span class="title">Listener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(ExceptionFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Result appResponse, Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (appResponse.hasException() &amp;&amp; GenericService.class != invoker.getInterface()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Throwable exception = appResponse.getException();</span><br><span class="line">                <span class="keyword">if</span> (!(exception <span class="keyword">instanceof</span> RuntimeException) &amp;&amp; (exception <span class="keyword">instanceof</span> Exception)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class="line">                    Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class="line">                    <span class="keyword">for</span> (Class&lt;?&gt; exceptionClass : exceptionClassses) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                logger.error(<span class="string">&quot;Got unchecked and undeclared exception which called by &quot;</span> + RpcContext.getContext().getRemoteHost() + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, exception: &quot;</span> + exception.getClass().getName() + <span class="string">&quot;: &quot;</span> + exception.getMessage(), exception);</span><br><span class="line">                String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());</span><br><span class="line">                String exceptionFile = ReflectUtils.getCodeBase(exception.getClass());</span><br><span class="line">                <span class="keyword">if</span> (serviceFile == <span class="keyword">null</span> || exceptionFile == <span class="keyword">null</span> || serviceFile.equals(exceptionFile)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String className = exception.getClass().getName();</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;java.&quot;</span>) || className.startsWith(<span class="string">&quot;javax.&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> RpcException) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                appResponse.setException(<span class="keyword">new</span> RuntimeException(StringUtils.toString(exception)));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Fail to ExceptionFilter when called by &quot;</span> + RpcContext.getContext().getRemoteHost() + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, exception: &quot;</span> + e.getClass().getName() + <span class="string">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e, Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Got unchecked and undeclared exception which called by &quot;</span> + RpcContext.getContext().getRemoteHost() + <span class="string">&quot;. service: &quot;</span> + invoker.getInterface().getName() + <span class="string">&quot;, method: &quot;</span> + invocation.getMethodName() + <span class="string">&quot;, exception: &quot;</span> + e.getClass().getName() + <span class="string">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogger</span><span class="params">(Logger logger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>网上大多数文章都是只写了 这一段 但是不告诉你 这个是dubbo 自己的实现</p>
<p>并且也没说 如果不配置 spi 覆盖 dubbo 中默认的 ExceptionFilter 并不会生效</p>
<p>要想自己的自定义异常不被dubbo拦截掉 就得覆盖 默认 ExceptionFilter</p>
<p>首先 SPI 配置文件   dubbo/internal/org.apache.dubbo.rpc.Filter</p>
<p>添加一行</p>
<p>exception=org.lqs1848.common.dubbo.filter.DubboExceptionFilter</p>
<p>再把 dubbo 默认ExceptionFilter(org.apache.dubbo.rpc.filter.ExceptionFilter) 复制到 org.lqs1848.common.dubbo.filter 目录 并改名 DubboExceptionFilter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(className.startsWith(<span class="string">&quot;org.lqs1848.&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//过滤掉自己的自定义异常</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dubbo 把它无法识别的异常封装为 RuntimeException 之前把自己的异常放过 ↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class="line">appResponse.setException(<span class="keyword">new</span> RuntimeException(StringUtils.toString(exception)));</span><br></pre></td></tr></table></figure>

<p>这里只写了自定义异常</p>
<p>实际使用中 可能还有 com.netflix.client.ClientException: Load balancer does not have available server for client</p>
<p>这样的降级熔断之类的项目公用的异常</p>
<p>也是需要单独处理</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我引入 dubbo 时面临的需求是 service 已经写完了 必须把 部分 service 分到一个单独的微服务进行维护</p>
<p>所以在不改动任何业务代码的情况下 引入 dubbo</p>
<p>引入 dubbo 后 原先 controller 调用 service 时 分页是 PageHelper  内部是用 ThreadLocal 传递的 分页信息</p>
<p>不想改所有service 就只能在 dubbo 调用上进行传递了</p>
<p>我并没有用 dubbo 来替代 feign</p>
<p>引入 dubbo 纯粹是解决业务上的需求 所以只使用了 <a href="#2">2 dubbo 单独使用</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringCloud</tag>
        <tag>Dubbo</tag>
        <tag>SPI</tag>
        <tag>异常传递</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 字符集判断</title>
    <url>/2021/04/06/2021-04-06%20Java%20%E5%AD%97%E7%AC%A6%E9%9B%86%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Java-字符集判断"><a href="#Java-字符集判断" class="headerlink" title="Java 字符集判断"></a>Java 字符集判断</h1><p>线上项目中有小票打印设备</p>
<p>小票打印的设备 没有做编码判断  小票机 只能打印GB2312的字符</p>
<p>java后台给出的字符又是UTF-8的 部分字符超过GB2312的范围了</p>
<p>百度了半天 关于Java的字符串 编码判断转换 都不能实现我所需要的效果</p>
<p>其实就是 判断 一下 字符是否超过 GB2312 超过就替换为 “□” 这样的方块</p>
<p>防止小票机出错就行了</p>
<p>但是 百度到的都是 编码转换 </p>
<p>比如</p>
<blockquote>
<p>String iso8859 = new String(sb.toString().getBytes(“iso8859-1”));<br>String gbk = new String(sb.toString().getBytes(“gbk”));<br>String utf8 = new String(sb.toString().getBytes(“utf-8”));<br>if(iso8859.equals(sb.toString())){<br>    System.out.println(“iso8859”);<br>}else  if(gbk.equals(sb.toString())){<br>    System.out.println(“gbk”);<br>}else  if(utf8.equals(sb.toString())){<br>    System.out.println(“utf8”);<br>}</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>return new String(str.getBytes(“ISO-8859-1”), “UTF-8”);</p>
</blockquote>
<p>都无法准确的判断 或者转换字符串的编码</p>
<p>实际上得使用</p>
<h2 id="Charset-canEncode"><a href="#Charset-canEncode" class="headerlink" title="Charset.canEncode"></a>Charset.canEncode</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">toGB2312</span><span class="params">(<span class="keyword">final</span> String s)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    Charset cs = Charset.forName(<span class="string">&quot;GB2312&quot;</span>);</span><br><span class="line">    CharsetEncoder encode = cs.newEncoder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> x = s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (encode.canEncode(x)) &#123;</span><br><span class="line">            sb.append(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;□&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题解决~</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>GB2312 的字符太小了 </p>
<p>很多商品其实是繁体字 是有对应的简体字的 虽然不多 但也聊胜于无吧</p>
<p>引入 <a href="https://github.com/program-in-chinese/zhconverter">https://github.com/program-in-chinese/zhconverter</a></p>
<p>其中的 “繁到简单字.properties” 改名为 “toSimple.properties”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ResourceBundle keyMap = ResourceBundle.getBundle(<span class="string">&quot;toSimple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">toChineseSimplified</span><span class="params">(<span class="keyword">final</span> String str)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str.length() &gt; <span class="number">1</span> &amp;&amp; keyMap.containsKey(str)) &#123;</span><br><span class="line">        <span class="keyword">return</span> keyMap.getString(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">        String ch = String.valueOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如有多个对应字符, 暂时用第一个; 如果没有对应字符, 保留原字符</span></span><br><span class="line">        sb.append(keyMap.containsKey(ch) ? keyMap.getString(ch).charAt(<span class="number">0</span>) : ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在返回给小票机的接口上添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//尝试让更多的字符能被扫码机识别</span></span><br><span class="line">    str = EnCodingUtils.toChineseSimplified(str);</span><br><span class="line">    <span class="comment">//扫码机只能识别 gb2312 不能识别 gb2312 以外的字符 超过范围的用 □ 代替</span></span><br><span class="line">    str = EnCodingUtils.toGB2312(str);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;字符转换异常&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>搞定收工~</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>gb2312</tag>
        <tag>字符集</tag>
      </tags>
  </entry>
  <entry>
    <title>DataBufferLimitException:Exceeded limit on max bytes to buffer</title>
    <url>/2021/05/08/2021-05-08%20Exceeded%20limit%20on%20max%20bytes%20to%20buffer/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="WebFlux-上传文件异常"><a href="#WebFlux-上传文件异常" class="headerlink" title="WebFlux 上传文件异常"></a>WebFlux 上传文件异常</h1><p>错误信息提示</p>
<blockquote>
<p>DataBufferLimitException: Exceeded limit on max bytes to buffer : 262144</p>
</blockquote>
<p>网上随便一搜</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">codec:</span></span><br><span class="line">    <span class="attr">max-in-memory-size:</span> <span class="string">20MB</span></span><br></pre></td></tr></table></figure>

<p>重启项目</p>
<p>报错依旧…</p>
<p>换个解决方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebfluxConfig</span> <span class="keyword">implements</span> <span class="title">WebFluxConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> WebClient <span class="title">getWebClientBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">	    <span class="keyword">return</span>   WebClient.builder().exchangeStrategies(ExchangeStrategies.builder()</span><br><span class="line">	            .codecs(configurer -&gt; configurer</span><br><span class="line">	                      .defaultCodecs()</span><br><span class="line">	                      .maxInMemorySize(<span class="number">20</span> * <span class="number">1024</span> * <span class="number">1024</span>))</span><br><span class="line">	                    .build())</span><br><span class="line">	                  .build();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureHttpMessageCodecs</span><span class="params">(ServerCodecConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.defaultCodecs().maxInMemorySize(<span class="number">20</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重启</p>
<p>又报错…</p>
<p>懵逼</p>
<p>仔细研究了一下</p>
<p>发现不是默认的Filter出错而是自己的自定义 Filter出错了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出错的位置</span></span><br><span class="line">ServerRequest serverRequest = <span class="keyword">new</span> DefaultServerRequest(exchange);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line">ServerRequest serverRequest = ServerRequest.create(exchange, codecConfigurer.getReaders());</span><br><span class="line"><span class="comment">//codecConfigurer 用spring注入的</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ServerCodecConfigurer codecConfigurer;</span><br></pre></td></tr></table></figure>



<p>简单讲就是 我自己写的 RequestBodyFilter 用的 Codecs 不是 Spring 注入的</p>
<p>所以之前设置的都没有生效</p>
<p>以前没问题是因为 这个filter 我写了 上传文件的白名单 这次接口刚添加 忘记加白名单了</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Exception</tag>
        <tag>WebFlux</tag>
      </tags>
  </entry>
</search>
